import shower;
import dynamic;
import common_types;
import math/math;

export {
    // Integer operations
    makeIntConst(name : string, val : int) -> EvalOper;
    makeIntUnary(name : string, op : (int) -> int) -> EvalOper;
    makeIntBinary(name : string, op : (int, int) -> int) -> EvalOper;

    intOpers : [EvalOper];
    intConst : EvalConst;
}

intOpers = [
    makeIntUnary("-", \x -> -x),
    EvalOper("+",
        funcAlgType([variadicAlgType(intType)], intType),
        \args -> Eval(\vals, conf -> {
            arg_vals = evalArgs(args, vals, conf);
            flow(fold(
                map(arg_vals, flow2i), 0, \acc, i -> acc + i
            ));
        }),
        showVariadicEvalOper("+")
    ),
    EvalOper("*",
        funcAlgType([variadicAlgType(intType)], intType),
        \args -> Eval(\vals, conf -> {
            arg_vals = evalArgs(args, vals, conf);
            flow(fold(
                map(arg_vals, flow2i), 1, \acc, i -> acc * i
            ));
        }),
        showVariadicEvalOper("*")
    ),
    makeIntBinary("/", \x, y -> x / y),
    makeIntBinary("-", \x, y -> x - y)
];

intConst = EvalConst(
    intType, 
    \n, conf -> if (isDigits(n)) {
        flow(s2i(n));
    } else {
        println("wrong integer format: " + n);
        flow(undefVal);
    }
);

makeIntConst(name : string, val : int) -> EvalOper {
    EvalOper(name,
        funcAlgType([], intType),
        \args -> Eval(\__,conf ->
            if (length(args) != 0) flow(undefVal) else {
                flow(val);
            }
        ),
        showConstEvalOper(name)
    )
}

makeIntUnary(name : string, op : (int) -> int) -> EvalOper {
    EvalOper(name, 
        funcAlgType([intType], intType),
        \args -> Eval(\vals, conf -> 
            if (length(args) != 1) flow(undefVal) else {
                arg_val = args[0].eval(vals, conf);
                if (arg_val == undefVal) flow(undefVal) else {
                    flow(op(flow2i(arg_val)));
                }
            }
        ),
        showPrefixUnaryEvalOper(name)
    )
}

makeIntBinary(name : string, op : (int, int) -> int) -> EvalOper {
    EvalOper(name, 
        funcAlgType([intType, intType], intType),
        \args -> Eval(\vals, conf -> 
            if (length(args) != 2) flow(undefVal) else {
                arg1_val = args[0].eval(vals, conf);
                if (arg1_val == undefVal) flow(undefVal) else {
                    arg2_val = args[1].eval(vals, conf);
                    if (arg2_val == undefVal) flow(undefVal) else {
                        flow(op(flow2i(arg1_val), flow2i(arg2_val)));
                    }
                }
            }
        ),
        showInfixBinaryEvalOper(name)
    );
}
