import eval;
import dynamic;
import opers/string;

export {
    // Basic first order logic construcitons: restricted quantifier, equality and predicates.
    makeQuantifier(Q : string, quant : ([?], (?) -> bool) -> bool) -> EvalOper;
    makeListQuantifier(Q : string, quant : ([[?]], ([?]) -> bool) -> bool) -> EvalOper;
    makePredicate(name : string, types : [AlgType], p : ([flow]) -> bool) -> EvalOper;

    folOpers : [EvalOper];

    makeForallTerm(v : AlgTermVar, t : AlgTerm, phi : AlgTerm) -> AlgTermFunc;
    makeExistsTerm(v : AlgTermVar, t : AlgTerm, phi : AlgTerm) -> AlgTermFunc;

    algTerm2freeVars(t : AlgTerm) -> Set<AlgTermVar>;
    algTerm2boundVars(t : AlgTerm) -> Set<AlgTermVar>;
    algTermCountBoundVars(t : AlgTerm) -> Tree<AlgTermVar, int>;
}

folOpers = [
    EvalOper("=", 
        funcAlgType([AlgTypeVar("T"), AlgTypeVar("T")] , boolType),
        \args -> Eval(\vals, conf ->
            if (length(args) != 2) flow(undefVal) else {
                flow(args[0].eval(vals, conf) == args[1].eval(vals, conf));
            }
        ),
        showBinaryEvalOper("=")
    ),
    EvalOper("!=", 
        funcAlgType([AlgTypeVar("T"), AlgTypeVar("T")] , boolType),
        \args -> Eval(\vals, conf ->
            if (length(args) != 2) flow(undefVal) else {
                flow(args[0].eval(vals, conf) != args[1].eval(vals, conf));
            }
        ),
        showBinaryEvalOper("!=")
    ),
    EvalOper("F",
        funcAlgType(
            [stringType, arrayAlgType(AlgTypeVar("T")), boolType] , 
            arrayAlgType(AlgTypeVar("T"))
        ),
        \args -> Eval(\vals, conf ->
            if (length(args) != 3) {
                flow(undefVal)
            } else {
                v = flow2s(args[0].eval(vals, conf));
                flow(filter(
                    cast(args[1].eval(vals, conf) : flow -> [flow]),
                    \a -> flow2b(args[2].eval(setTree(vals, v, a), conf))
                ));
            }
        ),
        \args -> Show(\->
            if (length(args) != 3) "broken term" else
            "F " + args[0].show() + " : " + args[1].show() + " " + args[2].show()
        )
    ),
    EvalOper("SF",
        funcAlgType(
            [stringType, arrayAlgType(AlgTypeVar("T")), boolType] , 
            arrayAlgType(AlgTypeVar("T"))
        ),
        \args -> Eval(\vals, conf ->
            if (length(args) != 3) {
                flow(undefVal)
            } else {
                v = flow2s(args[0].eval(vals, conf));
                a = cast(args[1].eval(vals, conf) : flow -> [flow]);
                sublists = map(enumFromTo(0, length(a)), \l -> subrange(a, 0, l));
                flow(filter(
                    sublists,
                    \sl -> flow2b(args[2].eval(setTree(vals, v, sl), conf))
                ));
            }
        ),
        \args -> Show(\-> 
            if (length(args) != 3) "broken term" else
            "SF " + args[0].show() + " : " + args[1].show() + " " + args[2].show()
        )
    ),
    makeQuantifier("A", forall),
    makeQuantifier("E", exists),
    makeListQuantifier("SA", forall),
    makeListQuantifier("SE", exists),
    makePredicate("in", 
        [AlgTypeVar("T"), arrayAlgType(AlgTypeVar("T"))], 
        \args -> {
            if (args[0] == undefVal || args[1] == undefVal) flow(undefVal) else {
                x = args[0];
                a = cast(args[1] : flow -> [flow]);
                flow(exists(a, \y -> y == x));
            }
        }
    ),
    makePredicate("sub", 
        [arrayAlgType(AlgTypeVar("T")), arrayAlgType(AlgTypeVar("T"))], 
        \args -> {
            a1 = cast(args[0] : flow -> [flow]);
            a2 = cast(args[1] : flow -> [flow]);
            if (length(a1) > length(a2)) false else 
            forall(zipWith(a1, a2, \x1, x2 -> Pair(x1, x2)), \p -> p.first == p.second);
        }
    ),
    makePredicate("<", [intType, intType], \args -> flow2i(args[0]) < flow2i(args[1])),
    makePredicate("<=", [intType, intType], \args -> flow2i(args[0]) <= flow2i(args[1])),
    EvalOper(
        "if", 
        funcAlgType([boolType, AlgTypeVar("T"), AlgTypeVar("T")], AlgTypeVar("T")),
        \args -> Eval(\vals, conf ->
            if (length(args) != 3) flow(undefVal) else {
                if (flow2b(args[0].eval(vals, conf))) {
                    args[1].eval(vals, conf);
                } else {
                    args[2].eval(vals, conf);
                }
            }
        ),
        \args -> Show(\->
            if (length(args) != 3) "broken term" else
            "(if " + args[0].show() + " then " + args[1].show() + " else " + args[2].show() + ")"
        )
    ),
    EvalOper(
        "?", 
        funcAlgType([boolType, AlgTypeVar("T"), AlgTypeVar("T")], AlgTypeVar("T")),
        \args -> Eval(\vals, conf ->
            if (length(args) != 3) flow(undefVal) else {
                cond = args[0].eval(vals, conf);
                if (flow2b(cond)) {
                    args[1].eval(vals, conf);
                } else {
                    args[2].eval(vals, conf);
                }
            }
        ),
        \args -> Show(\->
            if (length(args) != 3) "broken term" else
            "(" + args[0].show() + " ? " + args[1].show() + " : " + args[2].show() + ")"
        )
    ),
    EvalOper(
        "lambda", 
        funcAlgType([AlgTypeVar("A"), AlgTypeVar("V")], funcAlgType([AlgTypeVar("A")], AlgTypeVar("V"))),
        \args -> Eval(\vals, conf -> {
            v_raw = args[0].eval(vals, conf);
            println("v_raw: " + toString(v_raw));
            v = flow2s(args[0].eval(vals, conf));
            //t = cast(args[1].eval(vals, conf) : flow -> AlgType);
            flow(\x -> args[1].eval(setTree(vals, v, x), conf));
        }),
        \args -> Show(\-> {
            //var_type = cast(args[1].eval(vals, conf) : flow -> AlgType);
            "lambda " + args[0].show() + " " + args[1].show()
        })
    ),
    EvalOper(
        "call", 
        funcAlgType([funcAlgType([AlgTypeVar("A")], AlgTypeVar("V")), AlgTypeVar("A")], AlgTypeVar("V")),
        \args -> Eval(\vals, conf -> {
            fn = cast(args[0].eval(vals, conf) : flow -> (flow) -> flow);
            ar = args[1].eval(vals, conf);
            fn(ar);
        }),
        \args -> Show(\->
            args[0].show() + "(" + args[1].show() + ")"
        )
    )
];

makeQuantifier(Q : string, quant : ([?], (?) -> bool) -> bool) -> EvalOper {
    EvalOper(Q,
        funcAlgType([stringType, arrayAlgType(AlgTypeVar("T")), boolType] , boolType),
        \args -> Eval(\vals, conf ->
            if (length(args) != 3) {
                flow(undefVal)
            } else {
                v = flow2s(args[0].eval(vals, conf));
                flow(quant(
                    cast(args[1].eval(vals, conf) : flow -> [?]),
                    \a -> flow2b(args[2].eval(setTree(vals, v, a), conf))
                ));
            }
        ),
        \args -> Show(\->
            if (length(args) != 3) "broken term" else
            Q + " " + args[0].show() + " : " + args[1].show() + " " + args[2].show()
        )
    ); 
}

makeListQuantifier(Q : string, quant : ([[?]], ([?]) -> bool) -> bool) -> EvalOper {
    EvalOper(Q,
        funcAlgType([stringType, arrayAlgType(AlgTypeVar("T")), boolType] , boolType),
        \args -> Eval(\vals, conf -> 
            if (length(args) != 3) {
                flow(undefVal)
            } else {
                v = flow2s(args[0].eval(vals, conf));
                a = cast(args[1].eval(vals, conf) : flow -> [flow]);
                sublists = map(enumFromTo(0, length(a)), \l -> subrange(a, 0, l));
                flow(quant(
                    sublists,
                    \sl -> flow2b(args[2].eval(setTree(vals, v, sl), conf))
                ));
            }
        ),
        \args -> Show(\->
            if (length(args) != 3) "broken term" else
            Q + " " + args[0].show() + " : " + args[0].show() + " " + args[2].show()
        )
    ); 
}


makePredicate(name : string, types : [AlgType], p : ([flow]) -> bool) -> EvalOper {
    EvalOper(name, 
        funcAlgType(types, boolType),
        \args -> Eval(\vals, conf ->
            if (length(args) != length(types)) flow(undefVal) else {
                flow(p(evalArgs(args, vals, conf)))
            }
        ),
        showDfEvalOper(name)
    );
}

makeForallTerm(v : AlgTermVar, t : AlgTerm, phi : AlgTerm) -> AlgTermFunc {
    AlgTermFunc("A", [AlgTermFunc(v.name, [], stringType), t, phi], boolType);
}

makeExistsTerm(v : AlgTermVar, t : AlgTerm, phi : AlgTerm) -> AlgTermFunc {
    AlgTermFunc("E", [AlgTermFunc(v.name, [], stringType), t, phi], boolType);
}

algTerm2freeVars(t : AlgTerm) -> Set<AlgTermVar> {
    doAlgTerm2freeVars(makeSet(), t);
}

doAlgTerm2freeVars(acc : Set<AlgTermVar>, t : AlgTerm) -> Set<AlgTermVar> {
    switch (t) {
        AlgTermVar(__,__): insertSet(acc, t);
        AlgTermVarDecl(__,__): acc;
        AlgTermFunc(name, args, __): {
            acc1 = fold(args, acc, doAlgTerm2freeVars);
            if (!isVarBounderOper(name)) acc1 else {
                removeSet(acc1, cast(args[0] : AlgTerm -> AlgTermVar));
            }
        }
    }
}

algTerm2boundVars(t : AlgTerm) -> Set<AlgTermVar> {
    free = algTerm2freeVars(t);
    all = algTerm2vars(t);
    differenceSets(all, free);
}

algTermCountBoundVars(t : AlgTerm) -> Tree<AlgTermVar, int> {
    doAlgTermCountBoundVars(makeTree(), t);
}

doAlgTermCountBoundVars(acc : Tree<AlgTermVar, int>, t : AlgTerm) -> Tree<AlgTermVar, int> {
    switch (t) {
        AlgTermVar(__,__): acc; // setTree(acc, t, lookupTreeDef(acc, t, 0) + 1);
        AlgTermVarDecl(__,__): acc; 
        AlgTermFunc(name, args, __): {
            acc1 = fold(args, acc, doAlgTermCountBoundVars);
            if (!isVarBounderOper(name)) acc1 else {
                v = cast(args[0] : AlgTerm -> AlgTermVar);
                setTree(acc1, v, lookupTreeDef(acc, v, 0) + 1);
            }
        }
    }
}