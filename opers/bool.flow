import eval;
import dynamic;
import math/math;
import common_types;

export {
    // The definition of semantics for a classical propositional logic.
    makeBoolConst(name : string, v : bool) -> EvalOper;
    makeBoolUnary(name : string, op : (bool) -> bool) -> EvalOper;
    makeBoolBinary(name : string, op : (bool, bool) -> bool) -> EvalOper;
    makeBoolNary(name : string, op: ([bool]) -> bool) -> EvalOper;

    boolOpers : [EvalOper];

    makeAndTerm(args : [AlgTerm]) -> AlgTermFunc;
    makeOrTerm(args : [AlgTerm]) -> AlgTermFunc;
    makeNotTerm(arg : AlgTerm) -> AlgTermFunc;
    makeImplTerm(arg1 : AlgTerm, arg2 : AlgTerm) -> AlgTermFunc;
    makeEquivTerm(arg1 : AlgTerm, arg2 : AlgTerm) -> AlgTermFunc;

    makeBoolForallTerm(v : AlgTermVar, t : AlgTerm) -> AlgTermFunc;
    makeBoolExistsTerm(v : AlgTermVar, t : AlgTerm) -> AlgTermFunc;
    makeLongBoolForallTerm(vars : [AlgTermVar], t : AlgTerm) -> AlgTermFunc;
    makeLongBoolExistsTerm(vars : [AlgTermVar], t : AlgTerm) -> AlgTermFunc;
    
    getTermQuantVar(t : AlgTerm) -> AlgTermVar;
}

boolOpers = [
    makeBoolConst("T", true),
    makeBoolConst("F", false),
    makeBoolUnary("!", \v -> !v),
    makeBoolNary("\\/", any),
    makeBoolNary("/\\", all),
    makeBoolBinary("->", \v1, v2 -> !v1 || v2),
    makeBoolBinary("<->", \v1, v2 -> (v1 && v2) || (!v1 && !v2)),
    makeBoolQuantifier("BA"),
    makeBoolQuantifier("BE")
];

// General boolean operators

makeBoolConst(name : string, v : bool) -> EvalOper {
    EvalOper(name, boolType, 
        \__, args, __ -> {
            if (length(args) != 0) flow(undefVal) else flow(v)
        },
        \__,__ -> name
    );
}

makeBoolUnary(name : string, op : (bool) -> bool) -> EvalOper {
    EvalOper(name, unaryBoolFnType, 
        \e, args, vals -> {
            if (length(args) != 1) flow(undefVal) else {
                flow(op(flow2b(e.eval(args[0], vals))));
            }
        },
        showUnaryEvalOper(name)
    )
}

makeBoolBinary(name : string, op : (bool, bool) -> bool) -> EvalOper {
    EvalOper(name, binaryBoolFnType,
        \e, args, vals -> {
            if (length(args) != 2) flow(undefVal) else {
                flow(op(
                    flow2b(e.eval(args[0], vals)), 
                    flow2b(e.eval(args[1], vals))
                ));
            }
        },
        showBinaryEvalOper(name)
    );
}

makeBoolNary(name : string, op: ([bool]) -> bool) -> EvalOper {
    EvalOper(name, 
        funcAlgType([variadicAlgType(boolType)], boolType),
        \e, args, vals ->
            flow(op(map(args, \arg -> flow2b(e.eval(arg, vals))))),
        showVariadicEvalOper(name)
    );
}

makeBoolQuantifier(BQ : string) -> EvalOper {
    EvalOper(BQ,
        funcAlgType([stringType, boolType] , boolType),
        \e, args, vals -> {
            if (length(args) != 2) {
                flow(undefVal)
            } else {
                v = flow2s(args[0]);
                if (BQ == "BA") {
                    flow(
                        flow2b(e.eval(args[1], setTree(vals, v, true))) && 
                        flow2b(e.eval(args[1], setTree(vals, v, false)))
                    );
                } else {
                    flow(
                        flow2b(e.eval(args[1], setTree(vals, v, true))) || 
                        flow2b(e.eval(args[1], setTree(vals, v, false)))
                    );
                }
            }
        },
        \s, args -> {
            if (length(args) != 2) "broken term" else
            BQ + " " + s.show(args[0]) + " " + s.show(args[1]);
        }
    ); 
}

getBoolQuantifiers(f : AlgTerm) -> [string] {
    vs = doGetBoolQuantifiers(makeSet(), f);
    set2array (mapSet(vs, \v -> v.name))
}

doGetBoolQuantifiers(acc : Set<AlgTermVar>, f : AlgTerm) -> Set<AlgTermVar> {
   switch (f) {
        AlgTermVar(var, type): acc;
        AlgTermFunc(op, args, type): {
            if (!(startsWith(op, "BA ") || startsWith(op, "BE "))) {
                fold(args, acc, doGetBoolQuantifiers);
            } else {
                if (length(args) == 0) acc else {
                    v = args[0];
                    switch (v) {
                        AlgTermVar(__,__): 
                            fold(tail(args), insertSet(acc, v), doGetBoolQuantifiers);
                        AlgTermFunc(__,__,__): 
                            fold(args, acc, doGetBoolQuantifiers);
                    }
                }
            }
        }
   } 
}

// Long /\ and \/ stuff




makeLongBoolOperation(name : string, args : [AlgTerm]) -> AlgTermFunc {
    if (length(args) < 1) {
        println("000000 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 000000");
    }
    
    AlgTermFunc(name, args, boolType);
}

makeAndTerm(args : [AlgTerm]) -> AlgTermFunc {
    makeLongBoolOperation("/\\", args);
}

makeOrTerm(args : [AlgTerm]) -> AlgTermFunc {
    makeLongBoolOperation("\\/", args);
}

makeNotTerm(arg : AlgTerm) -> AlgTermFunc {
    AlgTermFunc("!", [arg], boolType);
}

makeImplTerm(arg1 : AlgTerm, arg2 : AlgTerm) -> AlgTermFunc {
    AlgTermFunc("->", [arg1, arg2], boolType);
}

makeEquivTerm(arg1 : AlgTerm, arg2 : AlgTerm) -> AlgTermFunc {
    AlgTermFunc("<->", [arg1, arg2], boolType);
}


makeLongBoolForallTerm(vars : [AlgTermVar], t : AlgTerm) -> AlgTermFunc {
    cast(fold(vars, t, \acc, v -> AlgTermFunc("BA " + v.name, [v, acc], boolType)) : AlgTerm -> AlgTermFunc);
}

makeLongBoolExistsTerm(vars : [AlgTermVar], t : AlgTerm) -> AlgTermFunc {
    cast(fold(vars, t, \acc, v -> AlgTermFunc("BE " + v.name, [v, acc], boolType)) : AlgTerm -> AlgTermFunc);
}

makeBoolForallTerm(v : AlgTermVar, t : AlgTerm) -> AlgTermFunc {
    AlgTermFunc("BA", [AlgTermFunc(v.name, [], stringType), t], boolType);
}

makeBoolExistsTerm(v : AlgTermVar, t : AlgTerm) -> AlgTermFunc {
    AlgTermFunc("BE", [AlgTermFunc(v.name, [], stringType), t], boolType);
}

getTermQuantVar(t : AlgTerm) -> AlgTermVar {
    switch (t) {
        AlgTermVar(__,__): AlgTermVar("ERROR QUANT VAR", undefAlgType);
        AlgTermFunc(name, args, __): {
            if (isQuantifierOper(name)) {
                cast(args[0] : AlgTerm -> AlgTermVar);
            } else {
                AlgTermVar("ERROR QUANT VAR", undefAlgType);
            }
        }
    }
}