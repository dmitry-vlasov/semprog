import shower;
import dynamic;
import common_types;
import parser/parse;

export {
    // String operations
    makeStringConst(name : string) -> EvalOper;
    stringConst : EvalConst;
    stringOpers : [EvalOper];
}

stringConst = EvalConst(stringType, \s,__ -> s);

makeStringConst(name : string) -> EvalOper {
    EvalOper(name, 
        funcAlgType([], stringType), 
        \args -> Eval(\vals, conf ->
            if (length(args) != 0) flow(undefVal) else flow(name)
        ),
        showConstEvalOper(name)
    )
}

stringOpers = [
    EvalOper("println", 
        funcAlgType([variadicAlgType(stringType)], voidType), 
        \args -> Eval(\vals, conf -> {
            iter(args, \arg -> println(arg.eval(vals, conf)));
            flow(VoidVal());
        }),
        showPrefixEvalOper("println")
    ),
    EvalOper("+", 
        funcAlgType([variadicAlgType(stringType)], stringType), 
        \args -> Eval(\vals, conf -> 
            flow(concatStrings(map(args, \arg -> 
                flow2s(arg.eval(vals, conf))
            )))
        ),
        showVariadicEvalOper("+")
    ),
    EvalOper("i2s", 
        funcAlgType([intType], stringType), 
        \args -> Eval(\vals, conf -> 
            if (length(args) != 1) flow(undefVal) else {
                flow(i2s(flow2i(args[0].eval(vals, conf))))
            }
        ),
        showPrefixEvalOper("i2s")
    ),
    EvalOper("b2s", 
        funcAlgType([boolType], stringType), 
        \args -> Eval(\vals, conf -> 
            if (length(args) != 1) flow(undefVal) else {
                flow(b2s(flow2b(args[0].eval(vals, conf))))
            }
        ),
        showPrefixEvalOper("b2s")
    ),
	EvalOper("a2s", 
        funcAlgType([anyType], stringType), 
        \args -> Eval(\vals, conf -> 
            if (length(args) != 1) flow(undefVal) else {
				str = toString(args[0].eval(vals, conf));
                flow(trim2(str, "\""));
            }
        ),
        showPrefixEvalOper("a2s")
    ),
	EvalOper("evals", 
        funcAlgType([stringType], anyType), 
        \args -> Eval(\vals, conf -> 
            if (length(args) != 1) flow(undefVal) else {
				src = flow2s(args[0].eval(vals, conf));
				term = parseTerm(src);
				/*println(
					"TERM: \n" + strIndent(src) + "\n=\n" + strIndent(^shower(term).show(conf)) + "\n"
				);*/
                ^semantics(term).eval(vals, conf);
            }
        ),
        showPrefixEvalOper("evals")
    )
];
