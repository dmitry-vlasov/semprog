import shower;
import dynamic;
import common_types;

export {
    // Array operations
    arrayOpers : [EvalOper];
}

arrayOpers = [
    EvalOper(
        "concat",
        funcAlgType(
            [variadicPlusAlgType(arrayAlgType(AlgTypeVar("T")))], 
            arrayAlgType(AlgTypeVar("T"))
        ),
        \args -> Eval(\vals, conf ->
            Val(
				concatA(
                	map(args, \arg -> cast(arg.eval(vals, conf).val : flow -> [Val]))
            	), 
				arrayAlgType(AlgTypeVar("T"))
			)
        ),
        showPrefixEvalOper("concat")
    ),
	EvalOper(
        "contains",
        funcAlgType(
            [arrayAlgType(AlgTypeVar("T")), AlgTypeVar("T")], 
            boolType
        ),
        \args -> Eval(\vals, conf -> {
			arr = cast(args[0].eval(vals, conf).val : flow -> [Val]);
			arg = args[1].eval(vals, conf);
            Val(
				contains(arr, arg), 
				//contains(map(arr, \x -> x.val), arg.val), 
				boolType
			)
		}),
        showPrefixEvalOper("contains")
    ),
    EvalOper("add", 
        funcAlgType(
            [arrayAlgType(AlgTypeVar("T")), AlgTypeVar("T")], 
            arrayAlgType(AlgTypeVar("T"))
        ),
        \args -> Eval(\vals, conf ->
			Val(
				concat( 
					cast(args[0].eval(vals, conf).val : flow -> [Val]),
					[args[1].eval(vals, conf)],
				), 
				arrayAlgType(AlgTypeVar("T"))
			)
        ),
        showPrefixEvalOper("add")
    ),
    EvalOper("tail", 
        funcAlgType(
            [arrayAlgType(AlgTypeVar("T"))], 
            arrayAlgType(AlgTypeVar("T"))
        ),
        \args -> Eval(\vals, conf ->
            Val(
				tail(cast(args[0].eval(vals, conf).val : flow -> [Val])), 
				arrayAlgType(AlgTypeVar("T"))
			)
        ),
        showPrefixEvalOper("tail")
    ),
    EvalOper("get", 
        funcAlgType(
            [arrayAlgType(AlgTypeVar("T")), intType], 
            AlgTypeVar("T")
        ),
        \args -> Eval(\vals, conf -> {
			a = cast(args[0].eval(vals, conf).val : flow -> [Val]);
			i = flow2i(args[1].eval(vals, conf).val);
			a[i];
        }),
        showPrefixEvalOper("get")
    ),
    EvalOper("sublists", 
        funcAlgType(
            [arrayAlgType(AlgTypeVar("T"))], 
            arrayAlgType(arrayAlgType(AlgTypeVar("T")))
        ),
        \args -> Eval(\vals, conf -> {
            a = cast(args[0].eval(vals, conf).val : flow -> [Val]);
            Val(
				map(enumFromTo(0, length(a)), \l -> subrange(a, 0, l)), 
				arrayAlgType(arrayAlgType(AlgTypeVar("T")))
			);
        }),
        showPrefixEvalOper("sublists")
    ),
    EvalOper(
        "arr",
        funcAlgType(
            [variadicStarAlgType(AlgTypeVar("T"))],
            arrayAlgType(AlgTypeVar("T"))
        ),
        \args -> Eval(\vals, conf -> 
			Val(
				map(args, \arg -> arg.eval(vals, conf)), 
				arrayAlgType(AlgTypeVar("T"))
			)
		),
        showPrefixBracketEvalOper("[", "]", "arr")
    ),
    EvalOper(
        "...", 
        funcAlgType([intType, intType], arrayAlgType(intType)),
        \args -> Eval(\vals, conf -> {
			low = flow2i(args[0].eval(vals, conf).val);
			hi  = flow2i(args[1].eval(vals, conf).val);
			Val(map(enumFromTo(low, hi), \i -> Val(i, intType)), arrayAlgType(intType));
        }),
        showInfixBracketEvalOper("[", "]", "...")
    ),
	EvalOper(
        "len",
        funcAlgType([arrayAlgType(AlgTypeVar("T"))], intType),
        \args -> Eval(\vals, conf -> {
			a = cast(args[0].eval(vals, conf).val : flow -> [Val]);
			Val(length(a), intType);
		}),
        showPrefixEvalOper("len")
    ),
];
