import shower;
import dynamic;
import math/math;
import common_types;

export {
    // The definition of semantics for a classical propositional logic.
    makeBoolConst(name : string, v : bool) -> EvalOper;
    makeBoolUnary(name : string, op : (bool) -> bool) -> EvalOper;
    makeBoolBinary(name : string, op : (bool, bool) -> bool) -> EvalOper;
    makeBoolNary(name : string, op: ([bool]) -> bool) -> EvalOper;

    boolOpers : [EvalOper];
	boolConst : EvalConst;

    makeAndTerm(args : [AlgTerm]) -> AlgTermFunc;
    makeOrTerm(args : [AlgTerm]) -> AlgTermFunc;
    makeNotTerm(arg : AlgTerm) -> AlgTermFunc;
    makeImplTerm(arg1 : AlgTerm, arg2 : AlgTerm) -> AlgTermFunc;
    makeEquivTerm(arg1 : AlgTerm, arg2 : AlgTerm) -> AlgTermFunc;

    makeBoolForallTerm(v : AlgTermVarUse, t : AlgTerm) -> AlgTermFunc;
    makeBoolExistsTerm(v : AlgTermVarUse, t : AlgTerm) -> AlgTermFunc;
    makeLongBoolForallTerm(vars : [AlgTermVarUse], t : AlgTerm) -> AlgTermFunc;
    makeLongBoolExistsTerm(vars : [AlgTermVarUse], t : AlgTerm) -> AlgTermFunc;
    
    getTermQuantVar(t : AlgTerm) -> AlgTermVarUse;
}

boolConst = EvalConst(
    boolType, 
    \n, conf -> if (n == "true" || n == "false") {
        Val(s2b(n), boolType);
    } else {
        println("wrong bool const format: " + n);
        Val(undefVal, boolType);
    }
);

boolOpers = [
    makeBoolConst("T", true),
    makeBoolConst("F", false),
	makeBoolConst("true", true),
    makeBoolConst("false", false),
    makeBoolUnary("!", \v -> !v),
    //makeBoolNary("\\/", any),
	EvalOper("\\/", 
        funcAlgType([variadicPlusAlgType(boolType)], boolType),
        \args -> Eval(\vals, conf -> {
			i = iteriUntil(args, \i, arg -> flow2b(arg.eval(vals, conf).val));
            Val(i != length(args), boolType);
		}),
        showInfixVariadicEvalOper("\\/")
    ),
    //makeBoolNary("/\\", all),
	EvalOper("/\\", 
        funcAlgType([variadicPlusAlgType(boolType)], boolType),
        \args -> Eval(\vals, conf -> {
			i = iteriUntil(args, \i, arg -> !flow2b(arg.eval(vals, conf).val));
            Val(i == length(args), boolType);
		}),
        showInfixVariadicEvalOper("/\\")
    ),
    //makeBoolBinary("->", \v1, v2 -> !v1 || v2),
	EvalOper("->", binaryBoolFnType,
        \args -> Eval(\vals, conf ->
			if (!flow2b(args[0].eval(vals, conf).val)) {
				Val(true, boolType);
			} else {
				Val(flow2b(args[1].eval(vals, conf).val), boolType);
			}
        ),
        showInfixBinaryEvalOper("->")
    ),
    makeBoolBinary("<->", \v1, v2 -> (v1 && v2) || (!v1 && !v2)),
    makeBoolQuantifier("BA"),
    makeBoolQuantifier("BE")
];

// General boolean operators

makeBoolConst(name : string, v : bool) -> EvalOper {
    EvalOper(name, boolType, 
        \args -> Eval(\__, conf -> Val(v, boolType)),
        \__ -> Show(\conf -> name)
    );
}

makeBoolUnary(name : string, op : (bool) -> bool) -> EvalOper {
    EvalOper(name, unaryBoolFnType, 
        \args -> Eval(\vals, conf ->
            Val(op(flow2b(args[0].eval(vals, conf).val)), boolType)
        ),
        showPrefixUnaryEvalOper(name)
    )
}

makeBoolBinary(name : string, op : (bool, bool) -> bool) -> EvalOper {
    EvalOper(name, binaryBoolFnType,
        \args -> Eval(\vals, conf ->
			Val(op(
				flow2b(args[0].eval(vals, conf).val), 
				flow2b(args[1].eval(vals, conf).val)
			), boolType)
        ),
        showInfixBinaryEvalOper(name)
    );
}

makeBoolNary(name : string, op: ([bool]) -> bool) -> EvalOper {
    EvalOper(name, 
        funcAlgType([variadicPlusAlgType(boolType)], boolType),
        \args -> Eval(\vals, conf ->
            Val(op(map(args, \arg -> flow2b(arg.eval(vals, conf).val))), boolType)
        ),
        showInfixVariadicEvalOper(name)
    );
}

makeBoolQuantifier(BQ : string) -> EvalOper {
    EvalOper(BQ,
        funcAlgType([stringType, boolType] , boolType),
        \args -> Eval(\vals, conf -> {
			v = flow2s(args[0].eval(vals, conf).val);
			if (BQ == "BA") {
				Val(
					flow2b(args[1].eval(setTree(vals, v, Val(true, boolType)), conf).val) && 
					flow2b(args[1].eval(setTree(vals, v, Val(false, boolType)), conf).val),
					boolType
				);
			} else {
				Val(
					flow2b(args[1].eval(setTree(vals, v, Val(true, boolType)), conf).val) || 
					flow2b(args[1].eval(setTree(vals, v, Val(false, boolType)), conf).val),
					boolType
				);
			}
		}),
        \args -> Show(\conf ->
            if (length(args) != 2) "broken term" else
            BQ + " " + args[0].show(conf) + " " + args[1].show(conf)
        )
    ); 
}

getBoolQuantifiers(f : AlgTerm) -> [string] {
    vs = doGetBoolQuantifiers(makeSet(), f);
    set2array (mapSet(vs, \v -> v.name))
}

doGetBoolQuantifiers(acc : Set<AlgTermVarUse>, f : AlgTerm) -> Set<AlgTermVarUse> {
   switch (f) {
        AlgTermVarUse(var, type): acc;
        AlgTermVarDecl(var, type): acc;
        AlgTermFunc(op, args, type): {
            if (!(startsWith(op, "BA ") || startsWith(op, "BE "))) {
                fold(args, acc, doGetBoolQuantifiers);
            } else {
                if (length(args) == 0) acc else {
                    v = args[0];
                    switch (v) {
                        AlgTermVarUse(__,__): 
                            fold(tail(args), insertSet(acc, v), doGetBoolQuantifiers);
                        AlgTermVarDecl(__,__): 
                            fold(tail(args), insertSet(acc, v), doGetBoolQuantifiers);
                        AlgTermFunc(__,__,__): 
                            fold(args, acc, doGetBoolQuantifiers);
                    }
                }
            }
        }
   } 
}

// Long /\ and \/ stuff




makeLongBoolOperation(name : string, args : [AlgTerm]) -> AlgTermFunc {
    if (length(args) < 1) {
        println("000000 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 000000");
    }
    
    AlgTermFunc(name, args, boolType);
}

makeAndTerm(args : [AlgTerm]) -> AlgTermFunc {
    makeLongBoolOperation("/\\", args);
}

makeOrTerm(args : [AlgTerm]) -> AlgTermFunc {
    makeLongBoolOperation("\\/", args);
}

makeNotTerm(arg : AlgTerm) -> AlgTermFunc {
    AlgTermFunc("!", [arg], boolType);
}

makeImplTerm(arg1 : AlgTerm, arg2 : AlgTerm) -> AlgTermFunc {
    AlgTermFunc("->", [arg1, arg2], boolType);
}

makeEquivTerm(arg1 : AlgTerm, arg2 : AlgTerm) -> AlgTermFunc {
    AlgTermFunc("<->", [arg1, arg2], boolType);
}


makeLongBoolForallTerm(vars : [AlgTermVarUse], t : AlgTerm) -> AlgTermFunc {
    cast(fold(vars, t, \acc, v -> AlgTermFunc("BA " + v.name, [v, acc], boolType)) : AlgTerm -> AlgTermFunc);
}

makeLongBoolExistsTerm(vars : [AlgTermVarUse], t : AlgTerm) -> AlgTermFunc {
    cast(fold(vars, t, \acc, v -> AlgTermFunc("BE " + v.name, [v, acc], boolType)) : AlgTerm -> AlgTermFunc);
}

makeBoolForallTerm(v : AlgTermVarUse, t : AlgTerm) -> AlgTermFunc {
    AlgTermFunc("BA", [AlgTermFunc(v.name, [], stringType), t], boolType);
}

makeBoolExistsTerm(v : AlgTermVarUse, t : AlgTerm) -> AlgTermFunc {
    AlgTermFunc("BE", [AlgTermFunc(v.name, [], stringType), t], boolType);
}

getTermQuantVar(t : AlgTerm) -> AlgTermVarUse {
    switch (t) {
        AlgTermVarUse(__,__): AlgTermVarUse("ERROR QUANT VAR", undefType);
        AlgTermVarDecl(__,__): AlgTermVarUse("ERROR QUANT VAR", undefType);
        AlgTermFunc(name, args, __): {
            if (isQuantifierOper(name)) {
                cast(args[0] : AlgTerm -> AlgTermVarUse);
            } else {
                AlgTermVarUse("ERROR QUANT VAR", undefType);
            }
        }
    }
}