import shower;
import dynamic;
import opers/string;

export {
    controlOpers : [EvalOper];
}

controlOpers = [
    EvalOper(
        "if", 
        funcAlgType([boolType, AlgTypeVar("T"), AlgTypeVar("T")], AlgTypeVar("T")),
        \args -> Eval(\vals, conf ->
			if (flow2b(args[0].eval(vals, conf).val)) {
				args[1].eval(vals, conf);
			} else {
				args[2].eval(vals, conf);
			}
        ),
        \args -> Show(\conf ->
            if (length(args) != 3) "broken term" else {
            	long = "(if " + args[0].show(conf) + " then " + args[1].show(conf) + " else " + args[2].show(conf) + ")";
				if (strlen(long) <= conf.foldLen) long else {
					"(if " + args[0].show(conf) + " then\n" + strIndent(args[1].show(conf)) + "\nelse\n" + strIndent(args[2].show(conf)) + "\n)";
				}
			}
        )
    ),
    EvalOper(
        "?", 
        funcAlgType([boolType, AlgTypeVar("T"), AlgTypeVar("T")], AlgTypeVar("T")),
        \args -> Eval(\vals, conf ->
			if (flow2b(args[0].eval(vals, conf).val)) {
				args[1].eval(vals, conf);
			} else {
				args[2].eval(vals, conf);
			}
        ),
        \args -> Show(\conf ->
            if (length(args) != 3) "broken term" else {
            	long = "(" + args[0].show(conf) + " ? " + args[1].show(conf) + " : " + args[2].show(conf) + ")";
				if (strlen(long) <= conf.foldLen) long else {
					"(\n" + strIndent(args[0].show(conf)) + " ?\n" + strIndent(args[1].show(conf)) + " :\n" + strIndent(args[2].show(conf)) + "\n)"
				}
			}
        )
    ),
	EvalOper(
        "let", 
        funcAlgType([AlgTypeVar("A"), AlgTypeVar("A"), AlgTypeVar("V")], AlgTypeVar("V")),
        \args -> Eval(\vals, conf -> {
            v = flow2s(args[0].eval(vals, conf).val);
			def = args[1].eval(vals, conf);
            args[2].eval(setTree(vals, v, def), conf);
        }),
        \args -> Show(\conf -> {
            long = "let " + args[0].show(conf) + " = " + args[1].show(conf) + "; " + args[2].show(conf);
			if (strlen(long) <= conf.foldLen) long else {
				"let " + args[0].show(conf) + " = " + args[1].show(conf) + ";\n" + args[2].show(conf);
			}
		})
    ),
	EvalOper(
        "some", 
        funcAlgType([AlgTypeVar("A")],AlgTypeFunc("maybe", [AlgTypeVar("V")])),
        \args -> Eval(\vals, conf ->
			Val(
				Some(args[0].eval(vals, conf)), 
				AlgTypeFunc("maybe", [AlgTypeVar("V")])
			)
        ),
        showPrefixEvalOper("some")
    ),
	EvalOper(
        "none", 
        funcAlgType([], AlgTypeFunc("maybe", [AlgTypeVar("V")])),
        \args -> Eval(\vals, conf ->
			Val(
				None(), 
				AlgTypeFunc("maybe", [AlgTypeVar("V")])
			)
        ),
        showPrefixEvalOper("none")
    ),
	EvalOper(
        "isNone", 
        funcAlgType([AlgTypeFunc("maybe", [AlgTypeVar("V")])], boolType),
        \args -> Eval(\vals, conf ->
			Val(isNone(args[0].eval(vals, conf).val), boolType)
        ),
        showPrefixEvalOper("isNone")
    ),
	EvalOper(
        "isSome", 
        funcAlgType([AlgTypeFunc("maybe", [AlgTypeVar("V")])], boolType),
        \args -> Eval(\vals, conf ->
			Val(isSome(args[0].eval(vals, conf).val), boolType)
        ),
        showPrefixEvalOper("isSome")
    ),
	EvalOper(
        "either", 
        funcAlgType(
			[
				AlgTypeFunc("maybe", [AlgTypeVar("V")]), 
				AlgTypeVar("V")
			], 
			AlgTypeVar("V")
		),
        \args -> Eval(\vals, conf -> {
			mval = args[0].eval(vals, conf).val;
			def_val = args[1].eval(vals, conf);
			either(mval, def_val);
        }),
        showPrefixEvalOper("either")
    ),
	EvalOper(
        "maybeMap", 
        funcAlgType(
			[
				AlgTypeFunc("maybe", [AlgTypeVar("V")]), 
				funcAlgType(
					[AlgTypeVar("V1")], 
					AlgTypeVar("V2")
				)
			],
			AlgTypeFunc("maybe", [AlgTypeVar("V2")])
		),
        \args -> Eval(\vals, conf -> {
			val = args[0].eval(vals, conf).val;
			fn = cast(args[1].eval(vals, conf).val : flow -> (Val) -> Val);
			Val(
				maybeMap(val, fn), 
				AlgTypeFunc("maybe", [AlgTypeVar("V2")])
			);
        }),
        showPrefixEvalOper("maybeMap")
    ),
	EvalOper(
        "maybeBind", 
        funcAlgType(
			[
				AlgTypeFunc("maybe", [AlgTypeVar("V")]), 
				funcAlgType(
					[AlgTypeVar("V1")], 
					AlgTypeFunc("maybe", [AlgTypeVar("V2")])
				)
			],
			AlgTypeFunc("maybe", [AlgTypeVar("V2")])
		),
        \args -> Eval(\vals, conf -> {
			val = args[0].eval(vals, conf).val;
			fn = args[1].eval(vals, conf).val;
			Val(
				maybeBind(val, fn), 
				AlgTypeFunc("maybe", [AlgTypeVar("V2")])
			);
        }),
        showPrefixEvalOper("maybeBind")
    ),
	EvalOper(
        "eitherMap", 
        funcAlgType(
			[
				AlgTypeFunc("maybe", [AlgTypeVar("V")]), 
				funcAlgType(
					[AlgTypeVar("V1")], 
					AlgTypeVar("V2")
				),
				AlgTypeVar("V2")
			],
			AlgTypeVar("V2")
		),
        \args -> Eval(\vals, conf -> {
			val = args[0].eval(vals, conf).val;
			fn  = args[1].eval(vals, conf).val;
			def = args[2].eval(vals, conf);
			eitherMap(val, fn, def);
        }),
        showPrefixEvalOper("eitherMap")
    ),
	EvalOper("find",
        funcAlgType(
            [
				AlgTypeVar("T"), 
				arrayAlgType(AlgTypeVar("T")), 
				boolType
			] , 
            AlgTypeFunc("maybe", [AlgTypeVar("V")])
        ),
        \args -> Eval(\vals, conf -> {
			v = flow2s(args[0].eval(vals, conf).val);
			Val(
				find(
					cast(args[1].eval(vals, conf).val : flow -> [Val]),
					\a -> flow2b(args[2].eval(setTree(vals, v, a), conf).val)
				), 
				AlgTypeFunc("maybe", [AlgTypeVar("V")])
			);
        }),
		showPrefixEvalOper("find")
    ),
	EvalOper("findmap",
        funcAlgType(
            [
				arrayAlgType(AlgTypeVar("T")), 
				funcAlgType(
					[AlgTypeVar("V1")], 
					AlgTypeFunc("maybe", [AlgTypeVar("V2")])
				)
			] , 
            AlgTypeFunc("maybe", [AlgTypeVar("V2")])
        ),
        \args -> Eval(\vals, conf -> {
			fn = cast(args[1].eval(vals, conf).val : flow -> (Val) -> Val);
			Val(
				findmap(
					cast(args[0].eval(vals, conf).val : flow -> [Val]),
					\a -> fn(a).val
				), 
				AlgTypeFunc("maybe", [AlgTypeVar("V2")])
			)
		}),
		showPrefixEvalOper("findmap")
    ),
];
