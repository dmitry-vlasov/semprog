import shower;
import dynamic;
import opers/string;

export {
    // Basic first order logic construcitons: restricted quantifier, equality and predicates.
    makeQuantifier(Q : string, quant : ([Val], (Val) -> bool) -> bool) -> EvalOper;
    makePredicate(name : string, types : [AlgType], p : ([flow]) -> bool) -> EvalOper;

    folOpers : [EvalOper];

    makeForallTerm(v : AlgTermVarUse, t : AlgTerm, phi : AlgTerm) -> AlgTermFunc;
    makeExistsTerm(v : AlgTermVarUse, t : AlgTerm, phi : AlgTerm) -> AlgTermFunc;

    algTerm2freeVars(t : AlgTerm) -> Set<AlgTermVarUse>;
    algTerm2boundVars(t : AlgTerm) -> Set<AlgTermVarUse>;
    algTermCountBoundVars(t : AlgTerm) -> Tree<AlgTermVarUse, int>;
}

folOpers = [
    EvalOper("=", 
        funcAlgType([AlgTypeVar("T"), AlgTypeVar("T")] , boolType),
        \args -> Eval(\vals, conf ->
            Val(args[0].eval(vals, conf).val == args[1].eval(vals, conf).val, boolType)
        ),
        showInfixBinaryEvalOper("=")
    ),
    EvalOper("!=", 
        funcAlgType([AlgTypeVar("T"), AlgTypeVar("T")] , boolType),
        \args -> Eval(\vals, conf ->
            Val(args[0].eval(vals, conf).val != args[1].eval(vals, conf).val, boolType)
        ),
        showInfixBinaryEvalOper("!=")
    ),
    EvalOper("F",
        funcAlgType(
            [AlgTypeVar("T"), arrayAlgType(AlgTypeVar("T")), boolType] , 
            arrayAlgType(AlgTypeVar("T"))
        ),
        \args -> Eval(\vals, conf -> {
			v = flow2s(args[0].eval(vals, conf).val);
			Val(
				filter(
					cast(args[1].eval(vals, conf).val : flow -> [Val]),
					\a -> flow2b(args[2].eval(setTree(vals, v, a), conf).val)
				), 
				arrayAlgType(AlgTypeVar("T"))
			);
        }),
        \args -> Show(\conf ->
            if (length(args) != 3) "broken term" else {
            	long = "F " + args[0].show(conf) + " in " + args[1].show(conf) + " " + args[2].show(conf);
				if (strlen(long) <= conf.foldLen) long else {
					"F " + args[0].show(conf) + " in " + args[1].show(conf) + "\n" + strIndent(args[2].show(conf));
				}
			}
        )
    ),
    makeQuantifier("A", forall),
    makeQuantifier("E", exists),
    makePredicate("in", 
        [AlgTypeVar("T"), arrayAlgType(AlgTypeVar("T"))], 
        \args -> {
            if (args[0] == undefVal || args[1] == undefVal) false else {
                x = args[0];
                a = cast(args[1] : flow -> [flow]);
                exists(a, \y -> y == x);
            }
        }
    ),
    makePredicate("sub", 
        [arrayAlgType(AlgTypeVar("T")), arrayAlgType(AlgTypeVar("T"))], 
        \args -> {
            a1 = cast(args[0] : flow -> [flow]);
            a2 = cast(args[1] : flow -> [flow]);
            if (length(a1) > length(a2)) false else 
            forall(zipWith(a1, a2, \x1, x2 -> Pair(x1, x2)), \p -> p.first == p.second);
        }
    ),
    makePredicate("<", [intType, intType], \args -> flow2i(args[0]) < flow2i(args[1])),
    makePredicate("<=", [intType, intType], \args -> flow2i(args[0]) <= flow2i(args[1])),
];

makeQuantifier(Q : string, quant : ([Val], (Val) -> bool) -> bool) -> EvalOper {
    EvalOper(Q,
        funcAlgType([AlgTypeVar("T"), arrayAlgType(AlgTypeVar("T")), boolType] , boolType),
        \args -> Eval(\vals, conf -> {
                v = flow2s(args[0].eval(vals, conf).val);
                Val(
					quant(
                    	cast(args[1].eval(vals, conf).val : flow -> [Val]),
                    	\a -> flow2b(args[2].eval(setTree(vals, v, a), conf).val)
                	),
					boolType
				);
        }),
        \args -> Show(\conf -> 
            if (length(args) != 3) "broken term" else {
            	long = Q + " " + args[0].show(conf) + " in " + args[1].show(conf) + " " + args[2].show(conf);
				if (strlen(long) < conf.foldLen) long else {
					Q + " " + args[0].show(conf) + " in " + args[1].show(conf) + "\n" + strIndent(args[2].show(conf));
				}
			}
		)
    ); 
}

makePredicate(name : string, types : [AlgType], p : ([flow]) -> bool) -> EvalOper {
    EvalOper(name, 
        funcAlgType(types, boolType),
        \args -> Eval(\vals, conf ->
            Val(p(map(evalArgs(args, vals, conf), \arg -> arg.val)), boolType)
        ),
        showPrefixEvalOper(name)
    );
}

makeForallTerm(v : AlgTermVarUse, t : AlgTerm, phi : AlgTerm) -> AlgTermFunc {
    AlgTermFunc("A", [AlgTermFunc(v.name, [], stringType), t, phi], boolType);
}

makeExistsTerm(v : AlgTermVarUse, t : AlgTerm, phi : AlgTerm) -> AlgTermFunc {
    AlgTermFunc("E", [AlgTermFunc(v.name, [], stringType), t, phi], boolType);
}

algTerm2freeVars(t : AlgTerm) -> Set<AlgTermVarUse> {
    doAlgTerm2freeVars(makeSet(), t);
}

doAlgTerm2freeVars(acc : Set<AlgTermVarUse>, t : AlgTerm) -> Set<AlgTermVarUse> {
    switch (t) {
        AlgTermVarUse(__,__): insertSet(acc, t);
        AlgTermVarDecl(__,__): acc;
        AlgTermFunc(name, args, __): {
            acc1 = fold(args, acc, doAlgTerm2freeVars);
            if (!isVarBounderOper(name)) acc1 else {
                removeSet(acc1, cast(args[0] : AlgTerm -> AlgTermVarUse));
            }
        }
    }
}

algTerm2boundVars(t : AlgTerm) -> Set<AlgTermVarUse> {
    free = algTerm2freeVars(t);
    all = algTerm2vars(t);
    differenceSets(all, free);
}

algTermCountBoundVars(t : AlgTerm) -> Tree<AlgTermVarUse, int> {
    doAlgTermCountBoundVars(makeTree(), t);
}

doAlgTermCountBoundVars(acc : Tree<AlgTermVarUse, int>, t : AlgTerm) -> Tree<AlgTermVarUse, int> {
    switch (t) {
        AlgTermVarUse(__,__): acc; // setTree(acc, t, lookupTreeDef(acc, t, 0) + 1);
        AlgTermVarDecl(__,__): acc; 
        AlgTermFunc(name, args, __): {
            acc1 = fold(args, acc, doAlgTermCountBoundVars);
            if (!isVarBounderOper(name)) acc1 else {
                v = cast(args[0] : AlgTerm -> AlgTermVarUse);
                setTree(acc1, v, lookupTreeDef(acc, v, 0) + 1);
            }
        }
    }
}
