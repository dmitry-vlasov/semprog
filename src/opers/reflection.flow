import shower;
import dynamic;
import common_types;
import parser/parse;

export {
    // Reflection operations
    reflectionOpers : [EvalOper];
}

reflectionOpers = [
    EvalOper("s2term", 
        funcAlgType([stringType], termType), 
        \args -> Eval(\vals, conf -> {
			src = flow2s(args[0].eval(vals, conf).val);
			vars = mapTree(vals, \v -> v.type);
			switch (^parser(src, vars)) {
				Some(term): {
					println(
						"TERM: \n" + strIndent(src) + "\n=\n" + strIndent(^shower(term).show(conf)) + "\n"
					);
					Val(term, termType);
				}
				None(): Val(undefTermVar, termType);
			}
        }),
        showPrefixEvalOper("s2term")
    ),
	EvalOper("term2s", 
        funcAlgType([termType], stringType), 
        \args -> Eval(\vals, conf -> {
			term = cast(args[0].eval(vals, conf).val : flow -> AlgTerm);
			Val(^shower(term).show(conf), stringType);
        }),
        showPrefixEvalOper("term2s")
    ),
	EvalOper("type2s", 
        funcAlgType([typeType], stringType), 
        \args -> Eval(\vals, conf -> {
			type = cast(args[0].eval(vals, conf).val : flow -> AlgType);
			Val(algType2s(type), stringType);
        }),
        showPrefixEvalOper("type2s")
    ),
	EvalOper("eval", 
        funcAlgType([termType], AlgTypeVar("T")), 
        \args -> Eval(\vals, conf -> {
			term = cast(args[0].eval(vals, conf).val : flow -> AlgTerm);
			^semantics(term).eval(vals, conf);
        }),
        showPrefixEvalOper("eval")
    ),
	EvalOper("quote", 
        funcAlgType([anyType], AlgTypeFunc("term", [])), 
        \args -> Eval(\vals, conf -> 
			// This function is special - its eval is made in evaluator function
			Val(undefVal, termType)
        ),
        showPrefixEvalOper("eval")
    ),
	EvalOper("type2tuple", 
        funcAlgType([typeType], AlgTypeFunc("tuple", [stringType, boolType, arrayAlgType(typeType)])), 
        \args -> Eval(\vals, conf -> {
			type = cast(args[0].eval(vals, conf).val : flow -> AlgType);
			switch (type) {
				AlgTypeVar(name): {
					Val(
						[Val(name, stringType), Val(true, boolType), Val([], arrayAlgType(typeType))],
						AlgTypeFunc("tuple", [stringType, boolType, arrayAlgType(typeType)]),
					);
				}
				AlgTypeFunc(name, as): {
					Val(
						[
							Val(name, stringType), 
							Val(false, boolType), 
							Val(map(as, \a -> Val(a, typeType)), arrayAlgType(typeType))
						],
						AlgTypeFunc("tuple", [stringType, boolType, arrayAlgType(typeType)]),
					);
				}
			}
        }),
        showPrefixEvalOper("type2tuple")
    ),
	EvalOper("tuple2type", 
        funcAlgType([AlgTypeFunc("tuple", [stringType, boolType, arrayAlgType(typeType)])], typeType), 
        \args -> Eval(\vals, conf -> {
			name   = flow2s(args[0].eval(vals, conf).val);
			is_var = flow2b(args[1].eval(vals, conf).val);
			Val(
				if (is_var) {
					AlgTypeVar(name);
				} else {
					as = cast(args[2].eval(vals, conf).val : flow -> [Val]);
					AlgTypeFunc(name, map(as, \a -> a.val));
				},
				typeType
			)
        }),
        showPrefixEvalOper("tuple2type")
    ),
	EvalOper("term2tuple", 
        funcAlgType([termType], AlgTypeFunc("tuple", [stringType, intType, typeType, arrayAlgType(termType)])), 
        \args -> Eval(\vals, conf -> {
			term = cast(args[0].eval(vals, conf).val : flow -> AlgTerm);
			switch (term) {
				AlgTermVarUse(name, type): {
					Val(
						[Val(name, stringType), Val(0, intType), Val(type, typeType), Val([], arrayAlgType(termType))],
						AlgTypeFunc("tuple", [stringType, intType, typeType, arrayAlgType(typeType)]),
					);
				}
				AlgTermVarDecl(name, type): {
					Val(
						[Val(name, stringType), Val(1, intType), Val(type, typeType), Val([], arrayAlgType(typeType))],
						AlgTypeFunc("tuple", [stringType, intType, typeType, arrayAlgType(termType)]),
					);
				}
				AlgTermFunc(name, as, type): {
					Val(
						[
							Val(name, stringType), 
							Val(2, intType), 
							Val(type, typeType),
							Val(map(as, \a -> Val(a, termType)), arrayAlgType(termType))
						],
						AlgTypeFunc("tuple", [stringType, intType, typeType, arrayAlgType(termType)]),
					);
				}
			}
        }),
        showPrefixEvalOper("term2tuple")
    ),
	EvalOper("tuple2term", 
        funcAlgType([AlgTypeFunc("tuple", [stringType, intType, typeType, arrayAlgType(termType)])], termType), 
        \args -> Eval(\vals, conf -> {
			name   = flow2s(args[0].eval(vals, conf).val);
			what   = flow2i(args[1].eval(vals, conf).val);
			type   = cast(args[2].eval(vals, conf).val : flow -> AlgType);
			Val(
				if (what == 0) {
					AlgTermVarUse(name, type);
				} else if (what == 1) {
					AlgTermVarDecl(name, type);
				} else {
					as = cast(args[3].eval(vals, conf).val : flow -> [Val]);
					AlgTermFunc(name, map(as, \a -> a.val), type);
				},
				termType
			)
        }),
        showPrefixEvalOper("tuple2term")
    ),

	EvalOper("makeTypeVar", 
        funcAlgType([stringType], typeType), 
        \args -> Eval(\vals, conf -> {
			name = flow2s(args[0].eval(vals, conf).val);
			Val(AlgTypeVar(name), typeType)
        }),
        showPrefixEvalOper("makeTypeVar")
    ),
	EvalOper("makeTypeFunc", 
        funcAlgType([stringType, arrayAlgType(typeType)], typeType), 
        \args -> Eval(\vals, conf -> {
			name   = flow2s(args[0].eval(vals, conf).val);
			as     = cast(args[1].eval(vals, conf).val : flow -> [Val]);
			Val(AlgTypeFunc(name, map(as, \a -> a.val)), typeType);
        }),
        showPrefixEvalOper("makeTypeFunc")
    ),
	EvalOper("typeKind", 
        funcAlgType([typeType], intType), 
        \args -> Eval(\vals, conf -> {
			type = cast(args[0].eval(vals, conf).val : flow -> AlgType);
			Val(
				switch (type) {
					AlgTypeVar(__):     0;
					AlgTypeFunc(__,__): 1;
				},
				intType
			)
        }),
        showPrefixEvalOper("typeKind")
    ),
	EvalOper("typeName", 
        funcAlgType([typeType], stringType), 
        \args -> Eval(\vals, conf -> {
			type = cast(args[0].eval(vals, conf).val : flow -> AlgType);
			Val(type.name, stringType)
        }),
        showPrefixEvalOper("typeName")
    ),
	EvalOper("typeArgs", 
        funcAlgType([typeType], arrayAlgType(typeType)), 
        \args -> Eval(\vals, conf -> {
			type = cast(args[0].eval(vals, conf).val : flow -> AlgType);
			Val(
				switch (type) {
					AlgTypeFunc(__,as): map(as, \a -> Val(a, typeType));
					default: [];
				},
				arrayAlgType(typeType)
			)
        }),
        showPrefixEvalOper("typeArgs")
    ),








	EvalOper("makeVarUse", 
        funcAlgType([stringType], termType), 
        \args -> Eval(\vals, conf -> {
			name   = flow2s(args[0].eval(vals, conf).val);
			Val(AlgTermVarUse(name, undefType), termType)
        }),
        showPrefixEvalOper("makeVarUse")
    ),
	EvalOper("makeVarUse", 
        funcAlgType([stringType, typeType], termType), 
        \args -> Eval(\vals, conf -> {
			name   = flow2s(args[0].eval(vals, conf).val);
			type   = cast(args[1].eval(vals, conf).val : flow -> AlgType);
			Val(AlgTermVarUse(name, type), termType)
        }),
        showPrefixEvalOper("makeVarUse")
    ),
	EvalOper("makeVarDecl", 
        funcAlgType([stringType, typeType], termType), 
        \args -> Eval(\vals, conf -> {
			name   = flow2s(args[0].eval(vals, conf).val);
			type   = cast(args[1].eval(vals, conf).val : flow -> AlgType);
			Val(AlgTermVarDecl(name, type), termType)
        }),
        showPrefixEvalOper("makeVarDecl")
    ),
	EvalOper("makeTermFunc", 
        funcAlgType([stringType, arrayAlgType(termType)], termType), 
        \args -> Eval(\vals, conf -> {
			name   = flow2s(args[0].eval(vals, conf).val);
			as     = cast(args[1].eval(vals, conf).val : flow -> [Val]);
			Val(AlgTermFunc(name, map(as, \a -> a.val), undefType), termType);
        }),
        showPrefixEvalOper("makeVarDecl")
    ),
	EvalOper("makeTermFunc", 
        funcAlgType([stringType, arrayAlgType(termType), typeType], termType), 
        \args -> Eval(\vals, conf -> {
			name   = flow2s(args[0].eval(vals, conf).val);
			as     = cast(args[1].eval(vals, conf).val : flow -> [Val]);
			type   = cast(args[2].eval(vals, conf).val : flow -> AlgType);
			Val(AlgTermFunc(name, map(as, \a -> a.val), type), termType);
        }),
        showPrefixEvalOper("makeVarDecl")
    ),
	EvalOper("termKind", 
        funcAlgType([termType], intType), 
        \args -> Eval(\vals, conf -> {
			term = cast(args[0].eval(vals, conf).val : flow -> AlgTerm);
			Val(
				switch (term) {
					AlgTermVarUse(__,__):  0;
					AlgTermVarDecl(__,__): 1;
					AlgTermFunc(__,__,__): 2;
				},
				intType
			)
        }),
        showPrefixEvalOper("termKind")
    ),
	EvalOper("termName", 
        funcAlgType([termType], stringType), 
        \args -> Eval(\vals, conf -> {
			term = cast(args[0].eval(vals, conf).val : flow -> AlgTerm);
			Val(term.name, stringType)
        }),
        showPrefixEvalOper("termName")
    ),
	EvalOper("termType", 
        funcAlgType([termType], typeType), 
        \args -> Eval(\vals, conf -> {
			term = cast(args[0].eval(vals, conf).val : flow -> AlgTerm);
			Val(term.type, typeType)
        }),
        showPrefixEvalOper("termType")
    ),
	EvalOper("termArgs", 
        funcAlgType([termType], arrayAlgType(termType)), 
        \args -> Eval(\vals, conf -> {
			term = cast(args[0].eval(vals, conf).val : flow -> AlgTerm);
			Val(
				switch (term) {
					AlgTermFunc(__,as,__): map(as, \a -> Val(a, termType));
					default: [];
				},
				arrayAlgType(termType)
			)
        }),
        showPrefixEvalOper("termType")
    ),
];
