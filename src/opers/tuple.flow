import shower;
import dynamic;
import common_types;

export {
    // Tuple operations
    tupleOpers : [EvalOper];
}

tupleOpers = [
    EvalOper(
        "tuple",
        funcAlgType([], AlgTypeFunc("tuple", [])),
        \args -> Eval(\vals, conf -> 
			Val([], AlgTypeFunc("tuple", []))
		),
        showPrefixEvalOper("tuple")
    ),
	EvalOper(
        "tuple",
        funcAlgType([AlgTypeVar("T")], AlgTypeFunc("tuple", [AlgTypeVar("T")])),
        \args -> Eval(\vals, conf ->
            Val([
					args[0].eval(vals, conf)
				], 
				AlgTypeFunc("tuple", [AlgTypeVar("T")])
			)
        ),
        showPrefixEvalOper("tuple")
    ),
	EvalOper(
        "tuple",
        funcAlgType([AlgTypeVar("T1"), AlgTypeVar("T2")], AlgTypeFunc("tuple", [AlgTypeVar("T1"), AlgTypeVar("T2")])),
        \args -> Eval(\vals, conf ->
            Val([
					args[0].eval(vals, conf),
					args[1].eval(vals, conf), 
				],
				AlgTypeFunc("tuple", [AlgTypeVar("T1"), AlgTypeVar("T2")])
			)
        ),
        showPrefixEvalOper("tuple")
    ),
	EvalOper(
        "tuple",
        funcAlgType(
			[AlgTypeVar("T1"), AlgTypeVar("T2"), AlgTypeVar("T3")], 
			AlgTypeFunc("tuple", [AlgTypeVar("T1"), AlgTypeVar("T2"), AlgTypeVar("T3")])
		),
        \args -> Eval(\vals, conf ->
			Val([
					args[0].eval(vals, conf),
					args[1].eval(vals, conf),
					args[2].eval(vals, conf)
				],
				AlgTypeFunc("tuple", [AlgTypeVar("T1"), AlgTypeVar("T2"), AlgTypeVar("T3")])
			)
        ),
        showPrefixEvalOper("tuple")
    ),
	EvalOper(
        "tuple",
        funcAlgType(
			[
				AlgTypeVar("T1"), 
				AlgTypeVar("T2"), 
				AlgTypeVar("T3"),
				AlgTypeVar("T4")
			], 
			AlgTypeFunc("tuple", [
				AlgTypeVar("T1"), 
				AlgTypeVar("T2"), 
				AlgTypeVar("T3"), 
				AlgTypeVar("T4")
			])
		),
        \args -> Eval(\vals, conf ->
			Val([
					args[0].eval(vals, conf),
					args[1].eval(vals, conf),
					args[2].eval(vals, conf),
					args[3].eval(vals, conf)
				],
				AlgTypeFunc("tuple", [
					AlgTypeVar("T1"), 
					AlgTypeVar("T2"), 
					AlgTypeVar("T3"), 
					AlgTypeVar("T4")
				])
			)
        ),
        showPrefixEvalOper("tuple")
    ),
	EvalOper(
        "tuple",
        funcAlgType(
			[
				AlgTypeVar("T1"), 
				AlgTypeVar("T2"), 
				AlgTypeVar("T3"),
				AlgTypeVar("T4"),
				AlgTypeVar("T5")
			], 
			AlgTypeFunc("tuple", [
				AlgTypeVar("T1"), 
				AlgTypeVar("T2"), 
				AlgTypeVar("T3"), 
				AlgTypeVar("T4"),
				AlgTypeVar("T5")
			])
		),
        \args -> Eval(\vals, conf ->
			Val([
					args[0].eval(vals, conf),
					args[1].eval(vals, conf),
					args[2].eval(vals, conf),
					args[3].eval(vals, conf),
					args[5].eval(vals, conf)
				],
				AlgTypeFunc("tuple", [
					AlgTypeVar("T1"), 
					AlgTypeVar("T2"), 
					AlgTypeVar("T3"), 
					AlgTypeVar("T4"),
					AlgTypeVar("T5")
				])
			)
        ),
        showPrefixEvalOper("tuple")
    ),
	// First
	EvalOper(
        "first",
        funcAlgType([AlgTypeFunc("tuple", [AlgTypeVar("T")])], AlgTypeVar("T")),
        \args -> Eval(\vals, conf ->
            cast(args[0].eval(vals, conf).val : flow -> [Val])[0]
        ),
        showPrefixEvalOper("first")
    ),
	EvalOper(
        "first",
        funcAlgType([AlgTypeFunc("tuple", [AlgTypeVar("T1"), AlgTypeVar("T2")])], AlgTypeVar("T1")),
        \args -> Eval(\vals, conf ->
            cast(args[0].eval(vals, conf).val : flow -> [Val])[0]
        ),
        showPrefixEvalOper("first")
    ),
	EvalOper(
        "first",
        funcAlgType([AlgTypeFunc("tuple", [AlgTypeVar("T1"), AlgTypeVar("T2"), AlgTypeVar("T3")])], AlgTypeVar("T1")),
        \args -> Eval(\vals, conf ->
			cast(args[0].eval(vals, conf).val : flow -> [Val])[0]
        ),
        showPrefixEvalOper("first")
    ),
	EvalOper(
        "first",
        funcAlgType([AlgTypeFunc("tuple", [AlgTypeVar("T1"), AlgTypeVar("T2"), AlgTypeVar("T3"), AlgTypeVar("T4")])], AlgTypeVar("T1")),
        \args -> Eval(\vals, conf ->
			cast(args[0].eval(vals, conf).val : flow -> [Val])[0]
        ),
        showPrefixEvalOper("first")
    ),
	EvalOper(
        "first",
        funcAlgType([AlgTypeFunc("tuple", [AlgTypeVar("T1"), AlgTypeVar("T2"), AlgTypeVar("T3"), AlgTypeVar("T4"), AlgTypeVar("T5")])], AlgTypeVar("T1")),
        \args -> Eval(\vals, conf ->
			cast(args[0].eval(vals, conf).val : flow -> [Val])[0]
        ),
        showPrefixEvalOper("first")
    ),

	// Second
	EvalOper(
        "second",
        funcAlgType([AlgTypeFunc("tuple", [AlgTypeVar("T1"), AlgTypeVar("T2")])], AlgTypeVar("T2")),
        \args -> Eval(\vals, conf ->
			cast(args[0].eval(vals, conf).val : flow -> [Val])[1]
        ),
        showPrefixEvalOper("second")
    ),
	EvalOper(
        "second",
        funcAlgType([AlgTypeFunc("tuple", [AlgTypeVar("T1"), AlgTypeVar("T2"), AlgTypeVar("T3")])], AlgTypeVar("T3")),
        \args -> Eval(\vals, conf ->
			cast(args[0].eval(vals, conf).val : flow -> [Val])[1]
        ),
        showPrefixEvalOper("second")
    ),
	EvalOper(
        "second",
        funcAlgType([AlgTypeFunc("tuple", [AlgTypeVar("T1"), AlgTypeVar("T2"), AlgTypeVar("T3"), AlgTypeVar("T4")])], AlgTypeVar("T3")),
        \args -> Eval(\vals, conf ->
			cast(args[0].eval(vals, conf).val : flow -> [Val])[1]
        ),
        showPrefixEvalOper("second")
    ),
	EvalOper(
        "second",
        funcAlgType([AlgTypeFunc("tuple", [AlgTypeVar("T1"), AlgTypeVar("T2"), AlgTypeVar("T3"), AlgTypeVar("T4"), AlgTypeVar("T5")])], AlgTypeVar("T3")),
        \args -> Eval(\vals, conf ->
			cast(args[0].eval(vals, conf).val : flow -> [Val])[1]
        ),
        showPrefixEvalOper("second")
    ),

	// Third
	EvalOper(
        "third",
        funcAlgType([AlgTypeFunc("tuple", [AlgTypeVar("T1"), AlgTypeVar("T2"), AlgTypeVar("T3")])], AlgTypeVar("T3")),
        \args -> Eval(\vals, conf ->
			cast(args[0].eval(vals, conf).val : flow -> [Val])[2]
        ),
        showPrefixEvalOper("third")
    ),
	EvalOper(
        "third",
        funcAlgType([AlgTypeFunc("tuple", [AlgTypeVar("T1"), AlgTypeVar("T2"), AlgTypeVar("T3"), AlgTypeVar("T4")])], AlgTypeVar("T3")),
        \args -> Eval(\vals, conf ->
			cast(args[0].eval(vals, conf).val : flow -> [Val])[2]
        ),
        showPrefixEvalOper("third")
    ),
	EvalOper(
        "third",
        funcAlgType([AlgTypeFunc("tuple", [AlgTypeVar("T1"), AlgTypeVar("T2"), AlgTypeVar("T3"), AlgTypeVar("T4"), AlgTypeVar("T5")])], AlgTypeVar("T3")),
        \args -> Eval(\vals, conf ->
			cast(args[0].eval(vals, conf).val : flow -> [Val])[2]
        ),
        showPrefixEvalOper("third")
    ),

	// Fourth
	EvalOper(
        "fourth",
        funcAlgType([AlgTypeFunc("tuple", [AlgTypeVar("T1"), AlgTypeVar("T2"), AlgTypeVar("T3"), AlgTypeVar("T4")])], AlgTypeVar("T4")),
        \args -> Eval(\vals, conf ->
			cast(args[0].eval(vals, conf).val : flow -> [Val])[3]
        ),
        showPrefixEvalOper("fourth")
    ),
	EvalOper(
        "fourth",
        funcAlgType([AlgTypeFunc("tuple", [AlgTypeVar("T1"), AlgTypeVar("T2"), AlgTypeVar("T3"), AlgTypeVar("T4"), AlgTypeVar("T5")])], AlgTypeVar("T4")),
        \args -> Eval(\vals, conf ->
			cast(args[0].eval(vals, conf).val : flow -> [Val])[3]
        ),
        showPrefixEvalOper("fourth")
    ),

	// Fifth
	EvalOper(
        "fifth",
        funcAlgType([AlgTypeFunc("tuple", [AlgTypeVar("T1"), AlgTypeVar("T2"), AlgTypeVar("T3"), AlgTypeVar("T4"), AlgTypeVar("T5")])], AlgTypeVar("T5")),
        \args -> Eval(\vals, conf ->
			cast(args[0].eval(vals, conf).val : flow -> [Val])[4]
        ),
        showPrefixEvalOper("fifth")
    ),
];
