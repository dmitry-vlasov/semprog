import shower;
import dynamic;

export {
	lambdaOpers : [EvalOper];
}

lambdaOpers = [
	EvalOper(
        "lambda", 
        funcAlgType([AlgTypeVar("V")], funcAlgType([], AlgTypeVar("V"))),
        \args -> Eval(\vals, conf -> {
            flow(\-> args[0].eval(vals, conf));
        }),
        showPrefixEvalOper("lambda")
    ),
	EvalOper(
        "lambda", 
        funcAlgType([AlgTypeVar("A"), AlgTypeVar("V")], funcAlgType([AlgTypeVar("A")], AlgTypeVar("V"))),
        \args -> Eval(\vals, conf -> {
            v = flow2s(args[0].eval(vals, conf));
            flow(\x -> args[1].eval(setTree(vals, v, x), conf));
        }),
        showPrefixEvalOper("lambda")
    ),
	EvalOper(
        "lambda", 
        funcAlgType(
			[AlgTypeVar("A1"), AlgTypeVar("A2"), AlgTypeVar("V")], 
			funcAlgType([AlgTypeVar("A1"), AlgTypeVar("A2")], AlgTypeVar("V"))
		),
        \args -> Eval(\vals, conf -> {
            v1 = flow2s(args[0].eval(vals, conf));
			v2 = flow2s(args[1].eval(vals, conf));
            flow(\x, y -> args[2].eval(setTree(setTree(vals, v1, x), v2, y), conf));
        }),
       	showPrefixEvalOper("lambda")
    ),
	EvalOper(
        "lambda", 
        funcAlgType(
			[AlgTypeVar("A1"), AlgTypeVar("A2"), AlgTypeVar("A3"), AlgTypeVar("V")], 
			funcAlgType([AlgTypeVar("A1"), AlgTypeVar("A2"), AlgTypeVar("A3")], AlgTypeVar("V"))
		),
        \args -> Eval(\vals, conf -> {
            v1 = flow2s(args[0].eval(vals, conf));
			v2 = flow2s(args[1].eval(vals, conf));
			v3 = flow2s(args[2].eval(vals, conf));
            flow(\x, y, z -> args[3].eval(setTree(setTree(setTree(vals, v1, x), v2, y), v3, z), conf));
        }),
        showPrefixEvalOper("lambda")
    ),
	EvalOper(
        "call", 
        funcAlgType(
			[funcAlgType([], AlgTypeVar("V"))], 
			AlgTypeVar("V")
		),
        \args -> Eval(\vals, conf -> {
            fn = cast(args[0].eval(vals, conf) : flow -> () -> flow);
            fn();
        }),
        showPrefixEvalOper("call")
    ),
    EvalOper(
        "call", 
        funcAlgType(
			[
				funcAlgType([AlgTypeVar("A")], AlgTypeVar("V")), 
				AlgTypeVar("A")
			], 
			AlgTypeVar("V")
		),
        \args -> Eval(\vals, conf -> {
            fn = cast(args[0].eval(vals, conf) : flow -> (flow) -> flow);
            ar = args[1].eval(vals, conf);
            fn(ar);
        }),
        showPrefixEvalOper("call")
    ),
	EvalOper(
        "call", 
        funcAlgType(
			[
				funcAlgType([AlgTypeVar("A1"), AlgTypeVar("A2")], AlgTypeVar("V")), 
				AlgTypeVar("A1"), AlgTypeVar("A2")
			], 
			AlgTypeVar("V")
		),
        \args -> Eval(\vals, conf -> {
            fn = cast(args[0].eval(vals, conf) : flow -> (flow, flow) -> flow);
            a_1 = args[1].eval(vals, conf);
			a_2 = args[2].eval(vals, conf);
            fn(a_1, a_2);
        }),
       showPrefixEvalOper("call")
    ),
	EvalOper(
        "call", 
        funcAlgType(
			[
				funcAlgType([AlgTypeVar("A1"), AlgTypeVar("A2"), AlgTypeVar("A3")], AlgTypeVar("V")), 
				AlgTypeVar("A1"), AlgTypeVar("A2"), AlgTypeVar("A3")
			], 
			AlgTypeVar("V")
		),
        \args -> Eval(\vals, conf -> {
            fn = cast(args[0].eval(vals, conf) : flow -> (flow, flow, flow) -> flow);
            a_1 = args[1].eval(vals, conf);
			a_2 = args[2].eval(vals, conf);
			a_3 = args[3].eval(vals, conf);
            fn(a_1, a_2, a_3);
        }),
        showPrefixEvalOper("call")
    ),
	EvalOper(
        "rec", 
        funcAlgType(
			[funcAlgType([AlgTypeVar("A1"), AlgTypeVar("A2"), AlgTypeVar("A3")], AlgTypeVar("V"))], 
			funcAlgType([AlgTypeVar("A1")], AlgTypeVar("V"))
		),
        \args -> Eval(\vals, conf -> {
            fn = args[0].eval(vals, conf);
			flow(\n -> 
				cast(fn : flow -> ((flow, flow, flow) -> flow))(n, 1, fn)
			);
        }),
        showPrefixEvalOper("rec")
    ),
];

doRecursion(
    f_0 : ([flow]) -> flow,
    f_1 : ([flow]) -> flow,
    g : ([flow]) -> flow,
    p : ([flow]) -> flow,
    args : [flow]
) -> flow {
    if (flow2b(p(args))) f_0(args) else {
        f_1(concat(
            [doRecursion(f_0, f_1, g, p, 
                concat([g(args)], tail(args))
            )],
            args
        ));
    }
}

recursion(
    f_0 : ([flow]) -> flow,
    f_1 : ([flow]) -> flow,
    g : ([flow]) -> flow,
    p : ([flow]) -> flow
) -> ([flow]) -> flow {
    \args -> doRecursion(f_0, f_1, g, p, args);
}

makeRecursion(n : AlgType, arg_types : [AlgType], val : AlgType) -> EvalOper {
    EvalOper("rec", 
        funcAlgType(
            [
                funcAlgType(concat([n], arg_types), val),       // f_0
                funcAlgType(concat([val, n], arg_types), val),  // f_1
                funcAlgType(concat([n], arg_types), n),         // g
                funcAlgType(concat([n], arg_types), boolType),  // p
            ],
            funcAlgType(concat([n], arg_types), val)
        ),
        \args -> Eval(\vals, conf -> {
            f_0 = cast(args[0].eval(vals, conf): flow -> ([flow]) -> flow);
            f_1 = cast(args[1].eval(vals, conf): flow -> ([flow]) -> flow);
            g   = cast(args[2].eval(vals, conf): flow -> ([flow]) -> flow);
            p   = cast(args[3].eval(vals, conf): flow -> ([flow]) -> flow);
            recursion(f_0, f_1, g, p);
        }),
        showPrefixEvalOper("rec")
    );
}

