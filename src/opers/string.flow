import shower;
import dynamic;
import common_types;
import parser/parse;

export {
    // String operations
    makeStringConst(name : string) -> EvalOper;
    stringConst : EvalConst;
    stringOpers : [EvalOper];
}

stringConst = EvalConst(stringType, \s,__ -> Val(s, stringType));

makeStringConst(name : string) -> EvalOper {
    EvalOper(name, 
        funcAlgType([], stringType), 
        \args -> Eval(\vals, conf -> Val(name, stringType)),
        showConstEvalOper(name)
    )
}

stringOpers = [
    EvalOper("println", 
        funcAlgType([variadicStarAlgType(stringType)], voidType), 
        \args -> Eval(\vals, conf -> {
            iter(args, \arg -> println(arg.eval(vals, conf).val));
            Val(VoidVal(), voidType);
        }),
        showPrefixEvalOper("println")
    ),
    EvalOper("+", 
        funcAlgType([variadicPlusAlgType(stringType)], stringType), 
        \args -> Eval(\vals, conf -> 
            Val(concatStrings(map(args, \arg -> 
                flow2s(arg.eval(vals, conf).val)
            )), stringType)
        ),
        showInfixVariadicEvalOper("+")
    ),
    EvalOper("i2s", 
        funcAlgType([intType], stringType), 
        \args -> Eval(\vals, conf -> 
            Val(i2s(flow2i(args[0].eval(vals, conf).val)), stringType)
        ),
        showPrefixEvalOper("i2s")
    ),
    EvalOper("b2s", 
        funcAlgType([boolType], stringType), 
        \args -> Eval(\vals, conf -> 
            Val(b2s(flow2b(args[0].eval(vals, conf).val)), stringType)
        ),
        showPrefixEvalOper("b2s")
    ),
	EvalOper("a2s", 
        funcAlgType([anyType], stringType), 
        \args -> Eval(\vals, conf -> {
			str = toString(args[0].eval(vals, conf).val);
            Val(trim2(str, "\""), stringType);
        }),
        showPrefixEvalOper("a2s")
    ),
];
