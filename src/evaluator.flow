import evalgebra;

export {
    algebraEval(alg : EvalAlgebra) -> (AlgTerm) -> Eval;
}

algebraEval(alg : EvalAlgebra) -> (AlgTerm) -> Eval {
    opers = fold(alg.opers, makeTree(), \acc, op -> 
        setTree(acc, op.name, concat(lookupTreeDef(acc, op.name, []), [op]))
    );
    consts = fold(alg.consts, makeTree(), \acc, const -> {
        if (containsKeyTree(acc, const.type)) {
            println("constant provider for type " + algType2s(const.type) + " is already provided");
        }
        setTree(acc, const.type, const);
    });
    \term -> evalAlgTerm(term, opers, consts);
}

evalAlgTerm(
    term : AlgTerm,
    opers : Tree<string, [EvalOper]>,
    consts : Tree<AlgTypeFunc, EvalConst>
) -> Eval {
    switch (term) {
        AlgTermVarUse(name, type): {
            Eval(\vals, conf -> {
                val = lookupTreeDef(vals, name, flow(undefVal));
                if (conf.trace) {
                    println(strIndentMany("var " + name + " = " + toString(val), ^(conf.callDepth)));
                }
                val;
            });
        }
        AlgTermVarDecl(name, __): {
            Eval(\vals, conf -> Val(name, stringType));
        }
        AlgTermFunc(name, args, type): {
			if (name == "quote") {
				Eval(\vals, conf ->
					Val(args[0], AlgTypeFunc("term", []))
				);
			} else {
				arg_types = map(args, \arg -> arg.type);
				arg_evals = map(args, \arg -> evalAlgTerm(arg, opers, consts));
				switch (evalAlgTermOper(name, type, arg_types, arg_evals, opers)) {
					Some(eval): eval;
					None(): {
						if (length(args) == 0) {
							switch (lookupTree(consts, type)) {
								Some(const): {
									Eval(\vals, conf -> {
										ret = const.eval(name, conf);
										if (conf.trace) {
											println(strIndentMany("const: " + name + " = " + toString(ret), ^(conf.callDepth)));
										}
										ret;
									});
								}
								None(): {
									println("Constant: " + name + " of type " + toString(type) +  " is uniterpreted");
									Eval(\vals, conf -> Val(undefVal, undefType));
								}
							}
						} else {
							evalAlgTermVal(name, type, arg_types, arg_evals, opers);
						}
					}
				}
			}
        }
    }
}

evalAlgTermOper(
	name : string, 
	type : AlgType,
	arg_types : [AlgType],
	arg_evals : [Eval],
    opers : Tree<string, [EvalOper]>
) -> Maybe<Eval> {
	maybeBind(lookupTree(opers, name),
		\ops -> {
			fits = filter(ops, \op -> 
				isSome(unifyTypes(
					if (type == undefType) funcArgTypes(op.sign) else concat(funcArgTypes(op.sign), [funcValType(op.sign)]), 
					if (type == undefType) arg_types else concat(arg_types, [type]), 
					makeTree()
				))
			);
			if (length(fits) == 0) {
				/*println(
					"No operator " + name + " matches argument types: [" + 
					strGlue(map(arg_types, \t -> algType2s(t)), ", ") + "]"
				);*/
				None();
			} else if (length(fits) > 1) {
				println(
					"Ambigous operator " + name + " unification with argument types: [" + 
					strGlue(map(arg_types, \t -> algType2s(t)), ", ") + "]"
				);
				None();
			} else {
				//call_depth = ^(conf.callDepth);
				//conf.callDepth := call_depth + 1;
				eval = fits[0].eval(arg_evals);
				//conf.callDepth := call_depth;
				Some(Eval(\vals, conf -> {
					if (conf.trace) {
						println(strIndentMany(
							"applying " + name + " of type " + algType2s(fits[0].sign) + "\n" + 
							" to return type: " + algType2s(type) + " to args of types:\n" + 
							strIndent(strGlue(map(arg_types, algType2s), "\n")) + "\n" +
							, 
							^(conf.callDepth)
						));
					}
					ret = Val(eval.eval(vals, conf) with type = type);
					if (conf.trace) {
						println(strIndentMany("result of " + name + " = " + toString(ret), ^(conf.callDepth)));
					}
					ret
				}));
			}
		}
	);
}


evalAlgTermVal(
    name : string, 
	type : AlgType,
	arg_types : [AlgType],
	arg_evals : [Eval],
	opers : Tree<string, [EvalOper]>,
) -> Eval {
	Eval(\vals, conf -> {
		switch (lookupTree(vals, name)) {
			Some(func_var): {
				if (length(arg_evals) == 0) {
					fn = cast(func_var.val : flow -> () -> Val);
					fn();
				} else if (length(arg_evals) == 1) {
					fn = cast(func_var.val : flow -> (Val) -> Val);
					fn(arg_evals[0].eval(vals, conf));
				} else if (length(arg_evals) == 2) {
					fn = cast(func_var.val : flow -> (Val, Val) -> Val);
					fn(
						arg_evals[0].eval(vals, conf), 
						arg_evals[1].eval(vals, conf)
					);
				} else if (length(arg_evals) == 3) {
					fn = cast(func_var.val : flow -> (Val, Val, Val) -> Val);
					fn(
						arg_evals[0].eval(vals, conf), 
						arg_evals[1].eval(vals, conf), 
						arg_evals[2].eval(vals, conf)
					);
				} else if (length(arg_evals) == 4) {
					fn = cast(func_var.val : flow -> (Val, Val, Val, Val) -> Val);
					fn(
						arg_evals[0].eval(vals, conf), 
						arg_evals[1].eval(vals, conf), 
						arg_evals[2].eval(vals, conf),
						arg_evals[3].eval(vals, conf), 
					);
				} else if (length(arg_evals) == 5) {
					fn = cast(func_var.val : flow -> (Val, Val, Val, Val, Val) -> Val);
					fn(
						arg_evals[0].eval(vals, conf), 
						arg_evals[1].eval(vals, conf), 
						arg_evals[2].eval(vals, conf),
						arg_evals[3].eval(vals, conf), 
						arg_evals[4].eval(vals, conf), 
					);
				} else if (length(arg_evals) == 6) {
					fn = cast(func_var.val : flow -> (Val, Val, Val, Val, Val, Val) -> Val);
					fn(
						arg_evals[0].eval(vals, conf), 
						arg_evals[1].eval(vals, conf), 
						arg_evals[2].eval(vals, conf),
						arg_evals[3].eval(vals, conf), 
						arg_evals[4].eval(vals, conf), 
						arg_evals[5].eval(vals, conf), 
					);
				} else if (length(arg_evals) == 7) {
					fn = cast(func_var.val : flow -> (Val, Val, Val, Val, Val, Val, Val) -> Val);
					fn(
						arg_evals[0].eval(vals, conf), 
						arg_evals[1].eval(vals, conf), 
						arg_evals[2].eval(vals, conf),
						arg_evals[3].eval(vals, conf), 
						arg_evals[4].eval(vals, conf), 
						arg_evals[5].eval(vals, conf), 
						arg_evals[6].eval(vals, conf), 
					);
				} else {
					println("Arity " + i2s(length(arg_evals)) + " of functional variable " + name + " is too high - not supproted yet");
					Val(undefVal, type);
				}
			}
			None(): {
				switch (lookupTree(opers, name)) {
					Some(ops): {
						println(
							"Operator: '" + name + "' cannot be unifed with argument types:\n" +
							concatStrings(map(arg_types, \t -> "\t" + algType2s(t) + "\n")) + "\n" + 
							"overloaded variants:\n" +
							concatStrings(map(ops, \op -> "\t" + op.name + " : " + algType2s(op.sign) + "\n"))
						);
					}
					None(): println("Unknown operator: " + name + "\n" +);
				}
				Val(undefVal, type);
			}
		}
	});
}

