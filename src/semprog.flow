import net/url_parameter;
import fs/filesystem;
import parser/parse;
import typecheck;
import module;
import evaluator;
import algebra;

main() -> void {
    println("Semantic programming framework\n");
	conf = makeConf();
	if (lookupTreeDef(conf.opts, "show-algebra", "") == "pre-defined") {
		println(evalAlgebra2s(fullAlgebra));
    } else if (conf.file == "") {
		println("No input file.");
		usage(conf);
	} else if (helpAsked(conf)) {
		usage(conf);
	} else if (!fileExists(conf.file)) {
        println("File: " + conf.file  + " doesn't exist");
	} else {
        ext = getFileExt(conf.file);
        if (ext != ".sem") {
            println("Extension: " + ext  + " mismatches the expected .sem");
        } else {
            src = getFileContent(conf.file);
            name = changeFileExt(conf.file, "");
			maybeApply(parseModule(src, name), 
				\parsed -> {
					if (lookupTreeDef(conf.opts, "show-parsed", "") == "1") {
						println("Parsed module " + name + ":\n" + moduleTerms2s(parsed, conf) + "\n\n");
					} else {
						sign = moduleSignature(parsed, fullAlgebra);
						module = typecheckModule(parsed, fullAlgebra, sign);
						defs = fold(module.defs, makeTree(), \acc, def -> setTree(acc, def.name, def));

						// makeSrcOper(defs : Tree<string, Def>) -> EvalOper;

						algebra = EvalAlgebra("module " + name + " algebra", 
							fold(module.defs, 
								concat(fullAlgebra.opers, [makeSrcOper(defs)]), 
								\acc, def -> concat(acc, [makeDefOper(def)])
							),
							fullAlgebra.consts
						);
						semantics := algebraEval(algebra);
						shower := algebraShow(algebra);
						parser := \str, vars -> maybeMap(parseTerm(str), \term -> typecheckTerm(term, vars, sign));

						if (lookupTreeDef(conf.opts, "show-algebra", "") == "all") {
							println(evalAlgebra2s(algebra));
						} else if (lookupTreeDef(conf.opts, "show-algebra", "") == "module") {
							println(evalAlgebra2s(
								EvalAlgebra("module " + name + " algebra", 
									map(module.defs, makeDefOper),
									[]
								)
							));
						} else if (lookupTreeDef(conf.opts, "show-module", "") == "1") {
							println("Module " + name + ":\n" + module2s(module, conf) + "\n\n");
						} else {
							if (exists(algebra.opers, \oper -> oper.name == "main")) {
								^semantics(AlgTermFunc("main", [], voidType)).eval(
									mapTree(conf.opts, \opt -> Val(opt, stringType)), conf
								);
								{}
							} else {
								if (conf.verbose > 0) {
									println("No main function is defined");
								}
							}
						}
					}
				}
			);
        }
    }
    quit(0);
}

helpAsked(conf : Conf) -> bool {
	conf.file == "-?"    || conf.file == "--?"    || 
	conf.file == "-help" || conf.file == "--help" ||
	containsKeyTree(conf.opts, "help");
}

usage(conf : Conf) -> void {
	help = helpAsked(conf);
	prih = \h, s -> if (h) println(s);
	pri  = \s -> println(s);
	pri("Usage:");
	pri("  semprog <file> [other=params]");
	pri("");
	prih(help, "Options:");
	prih(help, "      help=1                    Show help (available options)");
	prih(help, "      file=<name.sem>           Specify the input file");
	prih(help, "      show-parsed=1             Show the raw AST of parsed source");
	prih(help, "      show-module=1             Show module after typechecking");
	prih(help, "      show-algebra=<mode>       Show the signature of: {all | module | pre-defined}");
	prih(help, "      trace=1                   Trace the evaluation of source");
	prih(help, "      verbose=<int>             Set the level of verbosity");
	prih(help, "      fold-len=<int>            Maximum length of expressions, at which auto wrapping is on");
	prih(help,"");
}
