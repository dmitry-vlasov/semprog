toplevel = ws (!"def" term_1 | module);
module = (def_1)*:ds { makeModule(:ds) };

def = "def" ws id $n ws "(" ws (def_var)*:vs ")" ws ":" ws type:tp "{" ws term:t "}" ws { makeDef(:n, :vs, :tp, :t)};
def_var = var_decl:v ("," ws)? { :v };

def_1 = "def" ws id $n ws "(" ws (def_var)*:vs ")" ws ":" ws type:tp "{" ws term_1:t "}" ws { makeDef(:n, :vs, :tp, :t)};
def_var = var_decl_1:v ("," ws)? { :v };


// Types

type = type_arr | type_fn | type_infix | type_prefix | type_const ;

type_arr    = "[" ws type:t "]" ws { makeTypeArray(:t) } ;
type_fn     = "(" ws (type_fn_arg)*:as ")" ws "->" ws type:v { makeTypeFn(:as, :v) };
type_infix  = "(" ws (type_inf_arg)+:as ")" ws { makeTypeInfix(:as) };
type_prefix = type_id:op ws "(" ws (type_fn_arg)*:as ")" ws { makeTypePrefix(:op, :as) };
type_const  = type_id:op ws { makeTypeConst(:op) };
type_fn_arg  = type:t (',' ws)? { :t };
type_inf_arg = type:t (type_id:op ws)? { Pair(:t, :op) };

type_id   = (!bad_type_id_char char_)+ $id { $id };
bad_type_id_char = ws_ | '(' | ')' | '[' | ']' | '{' | '}' | ',';

// Terms (general algebraic representation)

term_1 = 
	term_infix_1  | term_infix_2  | term_infix_3 |
	term_prefix_1 | term_prefix_2 | term_prefix_3 |
	term_const    | var_decl_1    | var_use_1;

term_infix_1  = "(" ws (term_inf_arg)+:as ")" ws { makeTermInfix(:as) };
term_infix_2  = "[" ws (term_inf_arg)+:as "]" ws { makeTermInfix(:as) };
term_infix_3  = "{" ws (term_inf_arg)+:as "}" ws { makeTermInfix(:as) };

term_prefix_1 = term_id:op ws "(" ws (term_fn_arg)*:as ")" ws { makeTermPrefix(:op, :as) };
term_prefix_2 = term_id:op ws "[" ws (term_fn_arg)*:as "]" ws { makeTermPrefix(:op, :as) };
term_prefix_3 = term_id:op ws "{" ws (term_fn_arg)*:as "}" ws { makeTermPrefix(:op, :as) };

term_const   = term_id:op ws { makeTermConst(:op) };
term_fn_arg  = term_1:t (',' ws)? { :t };
term_inf_arg = term_1:t (term_id:op ws)? { Pair(:t, :op) };

term_id   = (!bad_term_id_char char_)+ $id { $id };
bad_term_id_char = ws_ | '(' | ')' | '[' | ']' | '{' | '}' | ',';

var_use_1  = term_id $s ws { makeTermVarUse($s) };
var_decl_1 = term_id $s ws ":" ws type:t { makeTermVarDecl($s, :t) };

term = 
    or | and | impl | neg | eq | true | false | 
    forall | exists | filter | string | let |
	lambda0 | lambda1 | lambda2 | lambda3 | 
	call0 | call1 | call2 | call3 |
    in | sub | equal | neq | less_eq  | less | 
    arithm_term | array_term | if | tern |
    func | var_use;

or   = "(" ws term:l "\\/" $op ws term:r ")" ws { makeTermFunc(:op, :l, :r) };
and  = "(" ws term:l "/\\" $op ws term:r ")" ws { makeTermFunc(:op, :l, :r) };
impl = "(" ws term:l "->"  $op ws term:r ")" ws { makeTermFunc(:op, :l, :r) };
eq   = "(" ws term:l "<->" $op ws term:r ")" ws { makeTermFunc(:op, :l, :r) };
neg  = "!" $op ws term:e { makeTermFunc(:op, :e)};
if   = "(" ws "if" $op ws term:c "then" ws term:p "else" term:n ")" ws { makeTermFunc(:op, :c, :p, :n) };
tern = "(" ws term:c "?" $op ws term:p ":" ws term:n ")" ws { makeTermFunc(:op, :c, :p, :n) };


true   = "True" $c ws  { makeTermFunc($c) };
false  = "False" $c ws { makeTermFunc($c) };

forall = "A" $q ws var_decl:v "in" ws term:a term:f { makeTermFunc($q, :v, :a, :f) };
exists = "E" $q ws var_decl:v "in" ws term:a term:f { makeTermFunc($q, :v, :a, :f) };
filter = "F" $q ws var_decl:v "in" ws term:a term:f { makeTermFunc($q, :v, :a, :f) };

string = '"' (!'"' char_)* $s '"' ws { makeStringConst($s) };

lambda0 = "lambda0" $op ws term:body { makeTermFunc($op, :body) };
lambda1 = "lambda1" $op ws var_decl:v "." ws term:body { makeTermFunc($op, :v, :body) };
lambda2 = "lambda2" $op ws var_decl:v1 "," ws var_decl:v2 "." ws term:body { makeTermFunc($op, :v1, :v2, :body) };
lambda3 = "lambda3" $op ws var_decl:v1 "," ws var_decl:v2 "," ws var_decl:v3 "." ws term:body { makeTermFunc($op, :v1, :v2, :v3, :body) };

call0 = "call0" $op ws "(" ws term:fn ")" ws { makeTermFunc($op, :fn, :as) };
call1 = "call1" $op ws "(" ws term:fn "," ws func_arg:a ")" ws { makeTermFunc($op, :fn, :a) };
call2 = "call2" $op ws "(" ws term:fn "," ws func_arg:a_1 "," ws func_arg:a_2 ")" ws { makeTermFunc($op, :fn, :a_1, :a_2) };
call3 = "call3" $op ws "(" ws term:fn "," ws func_arg:a_1 "," ws func_arg:a_2 "," ws func_arg:a_3 ")" ws { makeTermFunc($op, :fn, :a_1, :a_2, :a_3) };

call0 = "rec1" $op ws "(" ws term:fn ")" ws { makeTermFunc($op, :fn) };

let = "let" $op ws var_decl:v "=" ws term:def ";" ws term:body { makeTermFunc($op, :v, :def, :body) };

in      = "(" ws term:l "in"  $op ws term:r ")" ws { makeTermFunc($op, :l, :r) };
sub     = "(" ws term:l "sub" $op ws term:r ")" ws { makeTermFunc($op, :l, :r) };
less    = "(" ws term:l "<"   $op ws term:r ")" ws { makeTermFunc($op, :l, :r) };
less_eq = "(" ws term:l "<="  $op ws term:r ")" ws { makeTermFunc($op, :l, :r) };

equal = "(" ws term:l "=" $op ws term:r ")" ws  { makeTermFunc($op, :l, :r) };
neq   = "(" ws term:l "!=" $op ws term:r ")" ws { makeTermFunc($op, :l, :r) };

func = id $n ws "(" ws (func_arg)*:as ")" ws  { makeTermFuncNary($n, :as) };
    func_arg = term:t ("," ws)?  { :t };

// Arithmetics operations

arithm_term = add | prod | min | div | inv | const_int; 

add  = "(" ws term:f "+" $op ws (add_arg)+:as ")" ws { makeTermFuncNary1($op, :f, :as) };
    add_arg = term:t ("+" ws)? { :t };
prod = "(" ws term:f "*" $op ws (prod_arg)+:as ")" ws { makeTermFuncNary1($op, :f, :as) };
    prod_arg = term:t ("*" ws)? { :t };
min  = "(" ws term:l "-" $op ws term:r ")" ws { makeTermFunc($op, :l, :r) };
div  = "(" ws term:l "/" $op ws term:r ")" ws { makeTermFunc($op, :l, :r) };
inv  = "-" $op ws term:x { makeTermFunc($op, :x)};



// Array operations

array_term = concat_arr | tail_arr | add_arr | const_arr | get_arr | from_to | sublists;

concat_arr = "concat" $op ws "(" ws term:l "," ws term:r ")" ws        { makeTermFunc($op, :l, :r) };
tail_arr   = "tail" $op ws "(" ws term:l ")" ws                        { makeTermFunc($op, :l) };
add_arr    = "add" $op ws "(" ws (term | term):l "," ws term:r  ")" ws { makeTermFunc($op, :l, :r) };
const_arr  = "[" $op ws arr_term*:as "]" ws                            { makeArray($op, :as) };
    arr_term   = (term | term):x (',' ws)? { :x };
get_arr    = "get" $op ws "." ws term:a "[" ws term:i "]" ws           { makeTermFunc($op, :a, :i) };
from_to    = "[" ws term:from "..." $op ws term:to "]" ws              { makeTermFunc($op, :from, :to) };
sublists = "sublists" $op ws "(" ws term:t ")" ws                      { makeTermFunc($op, :t) } ;

var_use  = id $s ws { makeTermVarUse($s) };
var_decl = id $s ws ":" ws type:t { makeTermVarDecl($s, :t) };
id   = letter (letter | digit)*;
letter = 'a'-'z' | 'A'-'Z' | '_';

const_int = digit+ $s ws { makeTermFunc($s) };
digit = '0'-'9';


ws = ws_*;
ws_ = ' ' | '\t' | '\n' | '\r' | scomment | mcomment;

scomment = "//" (!'\n' char_)* '\n' ws;
mcomment = "/*" (!"*/" char_)* "*/" ws;
char_ = '\u0000'-'\uFFFF';