toplevel = ws (!"def" term | module);
module = (def)*:ds { makeModule(:ds) };

def = "def" ws term_id $n ws "(" ws (var_decl_arg)*:vs ")" ws ":" ws type:tp "{" ws term:t "}" ws { makeDef(:n, :vs, :tp, :t)};
var_decl_arg = var_decl:v ("," ws)? { :v };

// Types

type = type_arr | type_fn | type_infix | type_prefix | type_const ;

type_arr     = "[" ws type:t "]" ws                                           { makeTypeArray(:t) } ;
type_fn      = "(" ws (type_fn_arg)*:as ")" ws "->" ws type:v                 { makeTypeFn(:as, :v) };
type_infix   = "(" ws type:t1 type_id:op ws type:t2 (type_inf_arg)*:as ")" ws { makeTypeInfix(:op, :t1, :t2, :as) };
type_prefix  = type_id:op ws "(" ws (type_fn_arg)*:as ")" ws                  { makeTypePrefix(:op, :as) };
type_const   = type_id:op ws                                                  { makeTypeConst(:op) };
type_fn_arg  = type:t (',' ws)?  { :t };
type_inf_arg = type_id ws type:t { :t };

type_id   = (!bad_type_id_char char_)+ $id { $id };
bad_type_id_char = ws_ | '(' | ')' | '[' | ']' | '{' | '}' | ',';

// Terms (general algebraic representation)

term = term_int   | term_string   | term_bool     | term_let      |
	term_prefix_1 | term_prefix_2 | term_prefix_3 |
	term_infix_1  | term_infix_2  | term_infix_3  |
	var_decl      | var_use;

term_infix_1  = "(" ws term:a1 term_id:op ws term:a2 (term_inf_arg)*:as ")" ws { makeTermInfix(:op, :a1, :a2, :as) };
term_infix_2  = "[" ws term:a1 term_id:op ws term:a2 (term_inf_arg)*:as "]" ws { makeTermInfix(:op, :a1, :a2, :as) };
term_infix_3  = "{" ws term:a1 term_id:op ws term:a2 (term_inf_arg)*:as "}" ws { makeTermInfix(:op, :a1, :a2, :as) };

term_prefix_1 = term_id:op ws "(" ws (term_fn_arg)*:as ")" ws { makeTermPrefix(:op, :as) };
term_prefix_2 = term_id:op ws "[" ws (term_fn_arg)*:as "]" ws { makeTermPrefix(:op, :as) };
term_prefix_3 = term_id:op ws "{" ws (term_fn_arg)*:as "}" ws { makeTermPrefix(:op, :as) };

term_quant    = term_id:op ws var_decl_arg*:ds (term_fn_arg)+:as { makeTermQuant(:op, :ds, :as) };

term_let     = "let" $op ws var_decl:v "=" ws term:def ";" ws term:body { makeTermLet($op, :v, :def, :body) };

term_int     = ('0'-'9')+$val ws           { makeTermInt($val) };
term_bool    = ("true" | "false")$val ws   { makeTermBool($val) };
term_string  = '"' ("\\\"" | (!'"' char_))* $s '"' ws { makeTermString($s) };
term_fn_arg  = term:t (',' ws)?  { :t };
term_inf_arg = term_id ws term:t { :t };

term_id   = (!bad_term_id_char char_)+ $id { $id };
bad_term_id_char = ws_ | '(' | ')' | '[' | ']' | '{' | '}' | ',';

var_use  = term_id:id ws { makeTermVarUse(:id) };
var_decl = term_id:id ws ":" ws type:t { makeTermVarDecl(:id, :t) };

ws = ws_*;
ws_ = ' ' | '\t' | '\n' | '\r' | scomment | mcomment;

scomment = "//" (!'\n' char_)* '\n' ws;
mcomment = "/*" (!"*/" char_)* "*/" ws;
char_ = '\u0000'-'\uFFFF';