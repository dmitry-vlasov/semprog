import lingo/pegcode/driver;
import module;
import common_types;

export {
    parseModule(str : string, name : string) -> Maybe<Module>;
	parseTerm(str : string) -> Maybe<AlgTerm>;
}

semprog_parser : ref [PegOp] = ref [];

getParser() -> [PegOp] {
	if (^semprog_parser == []) {
		e_gr = "#include parser/module.lingo";
		semprog_parser := compilePegGrammar(e_gr);
	}
	^semprog_parser;
}

term_semantic_actions : Tree<string, ([flow]) -> flow> = pairs2tree([
	// Types
	Pair("makeTypeConst", \s -> constAlgType(flow2s(s[0]))),
	Pair("makeTypeArray", \s -> arrayAlgType(s[0])),
	Pair("makeTypeFn",    \s -> funcAlgType(s[0], s[1])),
	Pair("makeTypeInfix", \s ->
		AlgTypeFunc(s[0], concat([s[1], s[2]], cast(s[3] : flow -> [flow])))
	),
	Pair("makeTypePrefix", \s -> AlgTypeFunc(s[0], s[1])),

	// Terms
	Pair("makeTermInfix", \s -> 
		AlgTermFunc(s[0], concat([s[1], s[2]], cast(s[3] : flow -> [flow])), undefType)
	),
	Pair("makeTermPrefix",  \s -> AlgTermFunc(s[0], s[1], undefType)),
	Pair("makeTermQuant",   \s -> 
		AlgTermFunc(s[0], concat(cast(s[1] : flow -> [flow]), cast(s[2] : flow -> [flow])), undefType)
	),
	Pair("makeTermLet",   \s -> 
		AlgTermFunc(s[0], [s[1], s[2], s[3]], undefType)
	),
	Pair("makeTermString",  \s -> 
		AlgTermFunc(strReplaces(s[0], ["\\\"", "\"", "\\n", "\n", "\\t", "\t"]), [], stringType)
	),
	Pair("makeTermVoid",    \s -> AlgTermFunc("void", [], voidType)),
	Pair("makeTermInt",     \s -> AlgTermFunc(s[0], [], intType)),
	Pair("makeTermBool",    \s -> AlgTermFunc(s[0], [], boolType)),
	Pair("makeTermVarUse",  \s -> AlgTermVarUse(s[0], undefType)),
	Pair("makeTermVarDecl", \s -> AlgTermVarDecl(s[0], s[1])),
]);

module_semantic_actions : Tree<string, ([flow]) -> flow> = pairs2tree([
	Pair("makeModule", \s -> Module("", cast(s[0] : flow -> [Def]))),
	Pair("makeDef", \s -> Def(
		flow2s(s[0]), 
		cast(s[1] : flow -> [AlgTermVarDecl]), 
		cast(s[2] : flow -> AlgType), 
		cast(s[3] : flow -> AlgTerm)
	))
]);

// parsic3(op : [PegOp], code : string, actions : SemanticActions, def : ?) -> Triple<?, int, string> 

parseModule(str : string, name : string) -> Maybe<Module> {
	result = parsic3(getParser(), str, 
		SemanticActions(mergeTree(defaultPegActions.t,
			mergeTree(term_semantic_actions, module_semantic_actions)
		)),
		Module("", [])
	);
	if (result.third == "") {
		Some(Module(result.first with name = name));
	} else {
		println(result.third);
		None();
	}
}

parseTerm(str : string) -> Maybe<AlgTerm> {
	result = parsic3(getParser(), str, 
		SemanticActions(mergeTree(defaultPegActions.t, term_semantic_actions)),
		undefTermVar
	);
	if (result.third == "") {
		Some(result.first);
	} else {
		println(result.third);
		None();
	}
}
