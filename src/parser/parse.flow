import lingo/pegcode/driver;
import module;
import common_types;

export {
    parseModule(str : string, name : string) -> Module;
	parseTerm(str : string) -> AlgTerm;
}

parser : ref [PegOp] = ref [];

getParser() -> [PegOp] {
	if (^parser == []) {
		e_gr = "#include parser/module.lingo";
		parser := compilePegGrammar(e_gr);
	}
	^parser;
}

term_semantic_actions : Tree<string, ([flow]) -> flow> = pairs2tree([
	// Types
	Pair("makeTypeConst", \s -> constAlgType(flow2s(s[0]))),
	Pair("makeTypeArray", \s -> arrayAlgType(s[0])),
	Pair("makeTypeFn",    \s -> funcAlgType(s[0], s[1])),
	Pair("makeTypeInfix", \s ->
		AlgTypeFunc(s[0], concat([s[1], s[2]], cast(s[3] : flow -> [flow])))
	),
	Pair("makeTypePrefix", \s -> AlgTypeFunc(s[0], s[1])),

	// Terms
	Pair("makeTermInfix", \s -> 
		AlgTermFunc(s[0], concat([s[1], s[2]], cast(s[3] : flow -> [flow])), undefAlgType)
	),
	Pair("makeTermPrefix",  \s -> AlgTermFunc(s[0], s[1], undefAlgType)),
	Pair("makeTermQuant",   \s -> 
		AlgTermFunc(s[0], concat(cast(s[1] : flow -> [flow]), cast(s[2] : flow -> [flow])), undefAlgType)
	),
	Pair("makeTermLet",   \s -> 
		AlgTermFunc(s[0], [s[1], s[2], s[3]], undefAlgType)
	),
	Pair("makeTermString",  \s -> AlgTermFunc(s[0], [], stringType)),
	Pair("makeTermInt",     \s -> AlgTermFunc(s[0], [], intType)),
	Pair("makeTermBool",    \s -> AlgTermFunc(s[0], [], boolType)),
	Pair("makeTermVarUse",  \s -> AlgTermVarUse(s[0], undefAlgType)),
	Pair("makeTermVarDecl", \s -> AlgTermVarDecl(s[0], s[1])),
]);

module_semantic_actions : Tree<string, ([flow]) -> flow> = pairs2tree([
	Pair("makeModule", \s -> Module("", cast(s[0] : flow -> [Def]))),
	Pair("makeDef", \s -> Def(
		flow2s(s[0]), 
		cast(s[1] : flow -> [AlgTermVarDecl]), 
		cast(s[2] : flow -> AlgType), 
		cast(s[3] : flow -> AlgTerm)
	))
]);

parseModule(str : string, name : string) -> Module {
	module : Module = parsic(getParser(), str, 
		SemanticActions(mergeTree(defaultPegActions.t,
			mergeTree(term_semantic_actions, module_semantic_actions)
		))
	);
	Module(module with name = name);
}

parseTerm(str : string) -> AlgTerm {
	parsic(getParser(), str, 
		SemanticActions(mergeTree(defaultPegActions.t, term_semantic_actions))
	);
}
