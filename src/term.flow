import common_types;
import string_utils;

export {
    // General form of an algebraic term: variable or an operation over other terms.
    AlgTerm ::= AlgTermVarUse, AlgTermVarDecl, AlgTermFunc;
    AlgTermVarUse(name : string, type : AlgType);
    AlgTermVarDecl(name : string, type : AlgType);
    AlgTermFunc(name : string, args : [AlgTerm], type : AlgType);

    algTerm2s(term : AlgTerm) -> string;
    algTypedTerm2s(term : AlgTerm) -> string;
    algTerm2vars(term : AlgTerm) -> Set<AlgTermVarUse>;
    undefTermVar = AlgTermVarUse("UNDEF-VAR", undefType);
    undefTermFunc = AlgTermFunc("UNDEF-FUNC", [], undefType)

    // standard classes of operations

    // /\, \/, !, <->, ->
    isBoolOper(name : string) -> bool;

    // A, E, F, SA, SE, BA, BE
    isQuantifierOper(name : string) -> bool;

     // A, E, F, SA, SE, BA, BE
    isVarBounderOper(name : string) -> bool;
}

algTerm2s(term : AlgTerm) -> string {
    switch (term) {
        AlgTermVarUse(name, type): name /*+ (if (type == undefAlgType) "" else " : " + algType2s(type))*/;
        AlgTermVarDecl(name, type): name + " : " + algType2s(type);
        AlgTermFunc(name, args, type): {
			def_str = \-> {
				long = name + "(" + strGlue(map(args, algTerm2s), ", ") + ")";
				str = if (strlen(long) <= 48) long else {
					name + "(\n" + strIndent(strGlue(map(args, algTerm2s), ",\n")) + "\n)";
				}
				str /* + (if (type == undefAlgType) "" else " : " + algType2s(type));*/
			}
			if (length(args) == 0) {
				if (type == stringType) "\"" + name + "\"" else 
				if (type == intType || type == boolType) name else 
				def_str();
			} else {
				def_str();
			}
        }
    }
}

algTypedTerm2s(term : AlgTerm) -> string {
    switch (term) {
        AlgTermVarUse(name, type): name + " : " + algType2s(type);
        AlgTermVarDecl(name, type): name + " : " + algType2s(type);
        AlgTermFunc(name, args, type): {
			def_str = \-> {
				long = name + "(" + strGlue(map(args, algTypedTerm2s), ", ") + ") : " + algType2s(type);
				str = if (strlen(long) <= 48) long else {
					name + "(\n" + strIndent(strGlue(map(args, algTypedTerm2s), ",\n")) + "\n) : " + algType2s(type);
				}
				str /* + (if (type == undefAlgType) "" else " : " + algType2s(type));*/
			}
			if (length(args) == 0) {
				if (type == stringType) "\"" + name + "\"" else 
				if (type == intType || type == boolType) name else 
				def_str();
			} else {
				def_str();
			}
        }
    }
}

algTerm2vars(term : AlgTerm) -> Set<AlgTermVarUse> {
    doAlgTerm2s(makeSet(), term);
}

doAlgTerm2s(acc : Set<AlgTermVarUse>, term : AlgTerm) -> Set<AlgTermVarUse> {
    switch (term) {
        AlgTermVarUse(__, __): insertSet(acc, term);
        AlgTermVarDecl(__, __): acc; //insertSet(acc, term);
        AlgTermFunc(__, args, __): fold(args, acc, doAlgTerm2s);
    }
}

isBoolOper(name : string) -> bool {
    name == "\\/" || name == "/\\" || name == "!" || name == "->" || name == "<->";
}

isQuantifierOper(name : string) -> bool {
    name == "A" || name == "E" || name == "F" || name == "BA" || name == "BE" || name == "SA" || name == "SE" || name == "SF";
}

isVarBounderOper(name : string) -> bool {
    name == "A" || name == "E" || name == "F" || name == "BA" || name == "BE" || name == "SA" || name == "SE" || name == "SF" || name == "\\";
}
