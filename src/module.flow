import shower;
import typecheck;

export {
    Module(name : string, defs : [Def]);

    Def(
        name : string,
        vars : [AlgTermVarDecl],
        type : AlgType,
        term : AlgTerm
    );

    makeDefOper(def : Def) -> EvalOper;
	makeSrcOper(defs : Tree<string, Def>) -> EvalOper;
    module2s(module : Module, conf : Conf) -> string;
    def2s(def : Def, conf : Conf) -> string;
    typecheckModule(module : Module, algebra : EvalAlgebra, sign : Tree<string, [AlgTypeFunc]>) -> Module;

	moduleSignature(module : Module, algebra : EvalAlgebra) -> Tree<string, [AlgTypeFunc]>;
}

makeDefOper(def : Def) -> EvalOper {
    EvalOper(
        def.name,
        funcAlgType(map(def.vars, \v -> v.type), def.term.type),
        \args -> Eval(\vals, conf -> {
			arg_vals = evalArgs(args, vals, conf);
			if (conf.trace) {
				println(strIndentMany("calling func " + def.name + " with args " + toString(arg_vals), ^(conf.callDepth)));
			}
			vals1 = foldi(def.vars, vals, \i, acc, var -> 
				setTree(acc, var.name, arg_vals[i])
			);
			ret = ^semantics(def.term).eval(vals1, conf);
			if (conf.trace) {
				println(strIndentMany("return func " + def.name + " with value " + toString(ret), ^(conf.callDepth)));
			}
			ret
        }),
        showPrefixEvalOper(def.name)
    );
}

makeSrcOper(defs : Tree<string, Def>) -> EvalOper {
    EvalOper(
        "src",
        funcAlgType([stringType], termType),
        \args -> Eval(\vals, conf -> {
			name = flow2s(args[0].eval(vals, conf).val);
			switch (lookupTree(defs, name)) {
				Some(def): Val(def.term, termType);
				None(): Val(undefTermVar, termType);
			}
        }),
        showPrefixEvalOper("src")
    );
}

module2s(module : Module, conf : Conf) -> string {
    strGlue(map(module.defs, \def -> def2s(def, conf)), "\n");
}

def2s(def : Def, conf : Conf) -> string {
    "def " +  def.name + 
    " (" + strGlue(map(def.vars, algTerm2s), ", ") + ")" + 
    " : " + algType2s(def.type) + " {\n" +
		strIndent(
			if (lookupTreeDef(conf.opts, "show-typed", "") == "1") {
				algTypedTerm2s(def.term)
			} else if (lookupTreeDef(conf.opts, "show-term", "") == "1") {
				algTerm2s(def.term)
			} else {
				^shower(def.term).show(conf)
			}
		) 
	 + "\n}\n";
}

typecheckModule(module : Module, algebra : EvalAlgebra, sign : Tree<string, [AlgTypeFunc]>) -> Module {
    Module(module with 
        defs = map(module.defs, \def -> {
            //println("typechecking: " + def.name);
            vars = fold(def.vars, makeTree(), \acc, var -> setTree(acc, var.name, var.type));
            typechecked = typecheckTerm(def.term, vars, sign);
            /*if (typechecked.type == undefType) {
                println("Term " + algTerm2s(def.term) + " was not typed");
            }*/
            Def(def with term = typechecked);
        })
    );
}

defSign(def : Def) -> AlgTypeFunc {
    funcAlgType(map(def.vars, \v -> v.type), def.type);
}

moduleSignature(module : Module, algebra : EvalAlgebra) -> Tree<string, [AlgTypeFunc]> {
    fold(module.defs, 
		fold(algebra.opers, makeTree1("src", [funcAlgType([stringType], termType)]), 
			\acc, oper -> setTree(acc, oper.name, concat(lookupTreeDef(acc, oper.name, []), [oper.sign]))
		), 
		\acc, def -> setTree(acc, def.name, concat(lookupTreeDef(acc, def.name, []), [defSign(def)]))
    );
}
