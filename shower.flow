import evalgebra;

export {
    algebraShow(alg : EvalAlgebra) -> (AlgTerm) -> Show;

    showDfEvalOper(name : string) -> (args : [Show]) -> Show;
    showConstEvalOper(name : string) -> (args : [Show]) -> Show;
    showUnaryEvalOper(name) -> (args : [Show]) -> Show;
    showBinaryEvalOper(name) -> (args : [Show]) -> Show;
    showBracketEvalOper(open : string, close : string, infix : string) -> (args : [Show]) -> Show;
    showNaryEvalOper(name : string, arity : int) -> (args : [Show]) -> Show;
    showVariadicEvalOper(name : string) -> (args : [Show]) -> Show;

    showValuation(v : Tree<string, flow>) -> string;
}

algebraShow(alg : EvalAlgebra) -> (AlgTerm) -> Show {
    opers = fold(alg.opers, makeTree(), \acc, op -> 
        setTree(acc, op.name, concat(lookupTreeDef(acc, op.name, []), [op]))
    );
    consts = fold(alg.consts, makeTree(), \acc, const -> {
        if (containsKeyTree(acc, const.type)) {
            println("constant provider for type " + algType2s(const.type) + " is already provided");
        }
        setTree(acc, const.type, const);
    });
    \term -> showAlgTerm(term, opers, consts);
}

showAlgTerm(
    term : AlgTerm, 
    opers : Tree<string, [EvalOper]>,
    consts : Tree<AlgTypeFunc, EvalConst>
) -> Show {
    switch (term) {
        AlgTermVarUse(name, type): Show(\conf -> name);
        AlgTermVarDecl(name, type): Show(\conf -> name + " : " + algType2s(type));
        AlgTermFunc(name, args, type): {
            arg_types = map(args, \arg -> arg.type);
            eitherMap(
                lookupTree(opers, name), 
                \ops -> {
                    fits = filter(ops, \op -> 
                        isSome(matchTypes(funcArgTypes(op.sign), arg_types, makeTree()))
                    );
                    if (length(fits) == 0) {
                        println("No operator " + name + " matches argument types: " + strGlue(map(arg_types, \t -> algType2s(t)), ", "));
                        println("ops: " + strGlue(map(ops, \op -> algType2s(op.sign)), ", "));
                        Show(\conf -> "undefVal");
                    } else if (length(fits) > 1) {
                        println("Ambigous operator " + name + " matching with argument types: " + strGlue(map(arg_types, \t -> algType2s(t)), ", "));
                        Show(\conf -> "undefVal");
                    } else {
                        op = fits[0];
                        op.show(map(args, \arg -> showAlgTerm(arg, opers, consts)));
                    }
                }, 
                if (length(args) != 0) {
                    Show(\conf -> {
						long = name + "(" + strGlue(map(args, \arg -> showAlgTerm(arg, opers, consts).show(conf)), ", ") + ")";
						if (strlen(long) <= conf.foldLen) long else {
							name + "(\n" + strIndent(strGlue(map(args, \arg -> showAlgTerm(arg, opers, consts).show(conf)), ",\n")) + "\n)";
						}
					});
                } else {
                    Show(\conf -> name);
                    /*switch (lookupTree(consts, type)) {
                        Some(__): name;
                        None(): {
                            println("constant: " + name + " of type " + toString(type) +  " is uniterpreted");
                            "undefVal"
                        }
                    }*/
                }
            );
        }
    }
}

showValuation(v : Tree<string, flow>) -> string {
    strGlue(map(tree2pairs(v), \p -> p.first + "=" + toString(p.second)),  ", ");
}

showDfEvalOper(name : string) ->  (args : [Show]) -> Show {
    \args -> Show(\conf -> {
        long = name + (if (length(args) == 0) "" else  "(" + strGlue(map(args, \arg -> arg.show(conf)), ", ") + ")");
		if (strlen(long) <= conf.foldLen) long else {
			name + (if (length(args) == 0) "" else  "(\n" + 
				strIndent(strGlue(map(args, \arg -> arg.show(conf)), ",\n")) + 
			"\n)");
		}
	});
}

showConstEvalOper(name : string) ->  (args : [Show]) -> Show {
    \args -> Show(\conf ->
        if (length(args) != 0) "broken const " + name + ", args: [" + strGlue(map(args, \arg -> arg.show(conf)), ", ") + "]" else name
    );
}

showUnaryEvalOper(name : string) -> (args : [Show]) -> Show {
    \args -> Show(\conf ->
        if (length(args) != 1) "broken unary " + name + ", args: [" + strGlue(map(args, \arg -> arg.show(conf)), ", ") + "]" 
        else name + args[0].show(conf)
    );
}

showBinaryEvalOper(name : string) -> (args : [Show]) -> Show {
    \args -> Show(\conf ->
        if (length(args) != 2) "broken binary " + name + ", args: [" + strGlue(map(args, \arg -> arg.show(conf)), ", ") + "]" else {
        	long = "(" + args[0].show(conf) + " " + name + " " + args[1].show(conf) + ")";
			if (strlen(long) <= conf.foldLen) long else {
				"(\n" + strIndent(args[0].show(conf)) + "\n\t" + name + "\n" + strIndent(args[1].show(conf)) + "\n)";
			}
		}
    );
}

showNaryEvalOper(name : string, arity : int) ->  (args : [Show]) -> Show {
    \args -> Show(\conf ->
        if (length(args) != arity) "broken " + i2s(arity) + "-ary " + name + ", args: [" + strGlue(map(args, \arg -> arg.show(conf)), ", ") + "]" else {
        	long = "(" + strGlue(map(args, \arg -> arg.show(conf)), " " + name + " ")  + ")";
			if (strlen(long) <= conf.foldLen) long else {
				"(\n" + strIndent(strGlue(map(args, \arg -> arg.show(conf)), " " + name + "\n"))  + "\n)";
			}
		}
    );
}

showVariadicEvalOper(name : string) ->  (args : [Show]) -> Show {
    \args -> Show(\conf -> {
        long = "(" + strGlue(map(args, \arg -> arg.show(conf)), " " + name + " ")  + ")";
		if (strlen(long) <= conf.foldLen) long else {
			"(\n" + strIndent(strGlue(map(args, \arg -> arg.show(conf)), " " + name + "\n"))  + "\n)"
		}
	});
}

showBracketEvalOper(open : string, close : string, infix : string) ->  (args : [Show]) -> Show {
    \args -> Show(\conf -> {
        long = open + strGlue(map(args, \arg -> arg.show(conf)), infix + " ") + close;
		if (strlen(long) <= conf.foldLen) long else {
			open + "\n" + strIndent(strGlue(map(args, \arg -> arg.show(conf)), infix + "\n")) + "\n" + close;
		}
	});
}
