import prop/prop;

export {
    delta2qbf(term : AlgTermFunc, par : TransParams) -> AlgTerm;
    TransParams(praElems : [int], listPositions : [int]);
}

delta2qbf(term : AlgTermFunc, par : TransParams) -> AlgTerm {

    if (term.name == "=") {
        x = cast(term.args[0] : AlgTerm -> AlgTermVar);
        t = term.args[1];
        switch (t) {
            AlgTermVar(name, type) : {
                if (type == intType) {
                    intEquality2qbf(x, t, par);
                }
                else if (type == arType(intType)) {
                    intArrayEquality2qbf(x, t, par);
                }
                else {
                    undefTermVar
                }
            }
            AlgTermFunc(name, args, type) : {
                if (name == "tail") {
                    tailEquality2qbf(x, t, par);
                } 
                else if (name == "concat") {
                    concatEquality2qbf(x, t, par);
                }
                else if (isDigits(name)) {
                    constEquality2qbf(x, t, par);
                }
                else {
                    undefTermVar
                }
            }

        }
    } 
    else if (checkLogicOperationName(term)) {
        AlgTermFunc(term.name, map(term.args, \arg -> {
            switch (arg) {
                AlgTermVar(__, __) : {
                    arg
                }
                AlgTermFunc(__, __, __) : {
                    delta2qbf(arg, par)
                }
            }
            }), 
            boolType
        );
    }
    else if (startsWith(term.name, "E ")) {
        exists2qbf(term, par);
    }
    else if (startsWith(term.name, "A ")) {
        forall2qbf(term, par);
    }
    else if (term.name == "in") {
        in2qbf(term, par);
    }
    else if (term.name == "sub") {
        sub2qbf(term, par);
    } 
    else {
        undefTermVar
    }
}


intEquality2qbf(x : AlgTermVar, y : AlgTermVar, par : TransParams) -> AlgTerm {
    x1 = encodeVarAsBoolVect(x, par);
    y1 = encodeVarAsBoolVect(y, par);

    makeAndTerm(map(zipWith(x1, y1, \a, b -> Pair(a, b)), \p -> AlgTermFunc("<->", [p.first, p.second], boolType)));
}

intArrayEquality2qbf(x : AlgTermVar, y : AlgTermVar, par : TransParams) -> AlgTerm {
    x1 = encodeVarAsBoolMatrix(x, par);
    y1 = encodeVarAsBoolMatrix(y, par);

    makeXequivY(x1, y1, length(par.praElems), par);

}

tailEquality2qbf(x : AlgTermVar, t : AlgTermFunc, par : TransParams) -> AlgTerm {
    x1 = encodeVarAsBoolMatrix(x, par);
    y1 = encodeVarAsBoolMatrix(cast(t.args[0] : AlgTerm -> AlgTermVar), par);

    andNotX = makeAndNotX(x, length(par.listPositions) - 1, par);
    
    andEquivXY = makeAndTerm(
        map(zipWith(x1, y1, \a, b -> Pair(a, b)), \p -> makeAndTerm(
            map(zipWith(tail(p.first), p.second, \a, b -> Pair(a, b)), \l -> AlgTermFunc("<->", [l.first, l.second], boolType))
        ))
    );

    makeAndTerm([andNotX, andEquivXY]);
}

concatEquality2qbf(z : AlgTermVar, t : AlgTermFunc, par : TransParams) -> AlgTerm {
    z1 = encodeVarAsBoolMatrix(z, par);
    x = cast(t.args[0] : AlgTerm -> AlgTermVar);
    y = cast(t.args[1] : AlgTerm -> AlgTermVar);
    x1 = encodeVarAsBoolMatrix(x, par);
    y1 = encodeVarAsBoolMatrix(y, par);

    andNotx_and_orx = \i -> {
        AlgTermFunc(
            "/\\", 
            [
                makeAndNotX(x, i, par),
                makeOrTerm(map(par.praElems, \l -> AlgTermVar(x.name+"^"+i2s(l)+"_"+i2s(i-1), boolType)))                
            ],
            boolType
        )
    }

    z_equiv_y_from_i = \i -> {
        makeAndTerm(
            map(zipWith(z1, y1, \a, b -> Pair(a, b)), \p ->  
                makeAndTerm(map(enumFromTo(i, length(par.listPositions) - 1), \k -> AlgTermFunc("<->", [p.first[k], p.second[k - i]], boolType)))
            )
        )
    };

    andNotx0_imp_z_equiv_y_to_i = \i -> {
        AlgTermFunc(
            "->",
            [ 
                makeAndNotX(x, 0, par),
                makeXequivY(z1, y1, i - 1, par)
            ],
            boolType
        )
    }

    andNotx_and_orx_imp_long = \n -> {
        AlgTermFunc (
            "->", 
            [
                andNotx_and_orx(n),
                AlgTermFunc(
                    "/\\",
                    [
                        makeXequivY(z1, x1, n - 1, par),
                        z_equiv_y_from_i(n)
                    ],
                    boolType
                )
            ],
            boolType
        )
    }

    makeAndTerm(map(enumFromTo(1, length(par.listPositions) - 1), \j -> {
        AlgTermFunc(
            "/\\",
            [
                andNotx_and_orx_imp_long(j), 
                andNotx0_imp_z_equiv_y_to_i(j)
            ],
            boolType
            )
        })
    )
}

constEquality2qbf(x : AlgTermVar, t : AlgTermFunc, par : TransParams) -> AlgTerm {
    x1 = encodeVarAsBoolVect(x, par);
    c = s2i(t.name);
    x1[c];
}

exists2qbf(term : AlgTermFunc, par : TransParams) -> AlgTermFunc {
    x = cast(term.args[0] : AlgTerm -> AlgTermVar);
    t = cast(term.args[1] : AlgTerm -> AlgTermFunc);

    if (t.name == "in") {
        x1 = encodeVarAsBoolVect(x, par);

        cast(makeLongBoolExistsTerm(x1, makeImplTerm(
            makeAndTerm([
                makeMatrixAxiom(x, par), 
                delta2qbf(t, par)
            ]),
            delta2qbf(cast(term.args[2] : AlgTerm -> AlgTermFunc), par)
            )
        ) : AlgTerm -> AlgTermFunc)
    }
    else if (t.name == "sub") {
        x1 = encodeVarAsBoolMatrix(x, par);
        x1_lin = concatA(x1);

        cast(makeLongBoolExistsTerm(x1_lin, makeImplTerm(
            makeAndTerm([
                makeMatrixAxiom(x, par), 
                delta2qbf(t, par)
            ]),
            delta2qbf(cast(term.args[2] : AlgTerm -> AlgTermFunc), par)
            )
        ) : AlgTerm -> AlgTermFunc)        
    }
    else {
        undefTermFunc
    }

}

forall2qbf(term : AlgTermFunc, par : TransParams) -> AlgTermFunc {
    x = cast(term.args[0] : AlgTerm -> AlgTermVar);
    t = cast(term.args[1] : AlgTerm -> AlgTermFunc);


    if (t.name == "in") {
        x1 = encodeVarAsBoolVect(x, par);
        cast(makeLongBoolForallTerm(x1, makeAndTerm(
            [
                makeMatrixAxiom(x, par), 
                delta2qbf(cast(term.args[1] : AlgTerm -> AlgTermFunc), par),
                delta2qbf(cast(term.args[2] : AlgTerm -> AlgTermFunc), par)
            ] 
        )) : AlgTerm -> AlgTermFunc)
    }
    else if (t.name == "sub") {
        x1 = encodeVarAsBoolMatrix(x, par);
        x1_lin = concatA(x1);
        cast(makeLongBoolForallTerm(x1_lin, makeAndTerm(
            [
                makeMatrixAxiom(x, par), 
                delta2qbf(cast(term.args[1] : AlgTerm -> AlgTermFunc), par),
                delta2qbf(cast(term.args[2] : AlgTerm -> AlgTermFunc), par)
            ] 
        )) : AlgTerm -> AlgTermFunc)
    }
    else {
        undefTermFunc
    }
}

sub2qbf(term : AlgTermFunc, par : TransParams) -> AlgTermFunc { 
    x = cast(term.args[0] : AlgTerm -> AlgTermVar);
    y = cast(term.args[1] : AlgTerm -> AlgTermVar);

    x1 = encodeVarAsBoolMatrix(x, par);
    y1 = encodeVarAsBoolMatrix(y, par);

    makeAndTerm(
        map(zipWith(x1, y1, \a, b -> Pair(a, b)), \p -> makeAndTerm(
                map(zipWith(p.first, p.second, \a, b -> Pair(a, b)), \l -> makeImplTerm(l.first, l.second))
            )
        )
    );     
}

in2qbf(term : AlgTermFunc, par : TransParams) -> AlgTermFunc {
    x = cast(term.args[0] : AlgTerm -> AlgTermVar);
    y = cast(term.args[1] : AlgTerm -> AlgTermVar);

    x1 = encodeVarAsBoolVect(x, par);
    y1 = encodeVarAsBoolMatrix(y, par);

    makeOrTerm(map(par.praElems, \a -> 
        makeImplTerm(
            x1[a],
            makeOrTerm(map(par.listPositions, \l -> y1[a][l]))
        )
    ))

}   

makeXequivY(x : [[AlgTermVar]], y : [[AlgTermVar]], andBoundIndex : int, par : TransParams) -> AlgTermFunc {
    makeAndTerm(
        map(zipWith(x, y, \a, b -> Pair(a, b)), \p -> makeAndTerm(
                map(zipWith(p.first, p.second, \a, b -> Pair(a, b)), \l -> AlgTermFunc("<->", [l.first, l.second], boolType))
            )
        )
    ) 
}

makeAndNotX(x : AlgTermVar, index : int,  par : TransParams) -> AlgTermFunc {
    makeAndTerm( 
        map(
            par.praElems, 
            \l -> makeNotTerm(AlgTermVar(x.name+"^"+i2s(l)+"_"+i2s(index), boolType))
        )       
    )

}

makeMatrixAxiom(x : AlgTermVar, par : TransParams) -> AlgTermFunc {
    x1 = encodeVarAsBoolMatrix(x, par);
    
    orX_j = \j -> makeOrTerm(map(par.praElems, \l -> x1[l][j]));

    andNotX_without_a = \a, j -> makeAndTerm(
        map(
            filter(par.praElems, \elem -> elem != a), 
            \l -> makeNotTerm(x1[l][j])
        )
    );

    and_x_imp_andNotX_without_a = \j -> makeAndTerm(
        map(
            par.praElems,
            \a -> makeImplTerm(x1[a][j], andNotX_without_a(a, j))
        ) 
    );

    phi_1 = \k ->  makeAndTerm(map(enumFromTo(k, length(par.listPositions) - 1), \j -> makeAndNotX(x, j, par)));

    phi_2 = \k -> makeAndTerm(map(enumFromTo(0, k - 1), \j -> makeAndTerm([orX_j(j), and_x_imp_andNotX_without_a(j)])));


    makeOrTerm(map(enumFromTo(0, length(par.listPositions) - 1), \k -> makeAndTerm([phi_1(k), phi_2(k)])))
    
}

encodeVarAsBoolVect(x : AlgTermVar, par : TransParams) -> [AlgTermVar] {
    map(par.praElems, \a -> AlgTermVar(x.name + "^" + i2s(a), boolType));
}

encodeVarAsBoolMatrix(x : AlgTermVar, par : TransParams) -> [[AlgTermVar]] {
    map(par.praElems, \a -> map(par.listPositions, \l -> (AlgTermVar(x.name + "^" + i2s(a)+ "_"+i2s(l), boolType))));
}

checkLogicOperationName(term : AlgTerm) -> bool {
    startsWith(term.name, "\\/") || startsWith(term.name, "/\\") || term.name == "!" || term.name == "->" || term.name == "<->" 
}
