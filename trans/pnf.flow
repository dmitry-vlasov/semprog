import ds/cart_prod;
import prop/prop;
import fol/fol;

export {
    formula2pnf(term : AlgTerm) -> AlgTerm;
}

formula2pnf(t : AlgTerm) -> AlgTerm {
    t1 = tightNegations(elimImplEq(t));
    pulled = doPullQuantifiersOutside(t1, []);
    fold(pulled.second, toCNF(pulled.first), \acc, quant -> 
            AlgTermFunc(quant.name, [quant.var, quant.restriction, acc], boolType)
    );
}

elimImplEq(t : AlgTerm) -> AlgTerm {
	switch (t) {
        AlgTermVar(__,__): t;
        AlgTermFunc(name, args, type): {
            elim_args = map(args, elimImplEq);
            if (name == "->") {
                makeOrTerm([
                    makeNotTerm(elim_args[0]), 
                    elimImplEq(elim_args[1])
                ]);
            } else if (name == "<->") {
                makeOrTerm([
                    makeAndTerm([elim_args[0], elim_args[1]]),
                    makeAndTerm([makeNotTerm(elim_args[0]), makeNotTerm(elim_args[1])])
                ]);
            } else {
                AlgTermFunc(t with args = elim_args);
            }
        }
	}
}

tightNegations(t : AlgTerm) -> AlgTerm {
	switch (t) {
        AlgTermVar(__,__): t;
        AlgTermFunc(name, args, __): {
            if (name == "!") {
                arg = args[0];
                switch (args[0]) {
                    AlgTermVar(__,__): t;
                    AlgTermFunc(fn, as, __): {
                        if (startsWith(fn, "\\/")) {
                            makeAndTerm(map(as, \a -> tightNegations(makeNotTerm(a))));
                        } else if ((startsWith(fn, "/\\"))) {
                            makeOrTerm(map(as, \a -> tightNegations(makeNotTerm(a))));
                        } else if ((startsWith(fn, "!"))) {
                            tightNegations(as[0]);
                        } else if (startsWith(fn, "A ")) {
                            makeExistsTerm(
                                cast(as[0] : AlgTerm -> AlgTermVar),
                                tightNegations(as[1]),
                                tightNegations(makeNotTerm(as[2]))
                            );
                        } else if (startsWith(fn, "E ")) {
                            makeForallTerm(
                                cast(as[0] : AlgTerm -> AlgTermVar),
                                tightNegations(as[1]),
                                tightNegations(makeNotTerm(as[2]))
                            );
                        } else if (startsWith(fn, "BA ")) {
                            makeBoolExistsTerm(
                                cast(as[0] : AlgTerm -> AlgTermVar), 
                                tightNegations(makeNotTerm(as[1]))
                            );
                        } else if (startsWith(fn, "BE ")) {
                            makeBoolForallTerm(
                                cast(as[0] : AlgTerm -> AlgTermVar), 
                                tightNegations(makeNotTerm(as[1]))
                            );
                        } else {
                            println("illegal operation in tightNegations: " + fn);
                            t
                        }
                    }
                }
            } else  {
                AlgTermFunc(t with args = map(args, tightNegations));
            }
        }
    }
}

toCNF(t : AlgTerm) -> AlgTerm {
    wrap = \ -> makeAndTerm([makeOrTerm([t])]);
    switch (t) {
        AlgTermVar(__,__): wrap();
        AlgTermFunc(name, args, __): {
            cnf_args = map(args, toCNF);
            if (startsWith(name, "/\\")) {
                makeAndTerm(concatA(map(cnf_args, \a -> cast(a : AlgTerm -> AlgTermFunc).args)));
            } else if (startsWith(name, "\\/")) {
                makeAndTerm(
                    mapCartProd(
                        CartProd(map(cnf_args, \cnf -> cast(cnf : AlgTerm -> AlgTermFunc).args)), 
                        \disjs -> makeOrTerm(disjs)
                    )
                );
            } else {
                wrap();
            }
        }
    }
}


AllBoundVarsDifferentEnv(
    counter : int,
    renaming : Tree<string, string>
);

makeAllBoundVarsDifferent(t : AlgTerm) -> AlgTerm {
    doMakeAllBoundVarsDifferent(t, AllBoundVarsDifferentEnv(0, makeTree())).first;
}

doMakeAllBoundVarsDifferent(t : AlgTerm, env : AllBoundVarsDifferentEnv) -> Pair<AlgTerm, AllBoundVarsDifferentEnv> {
    switch (t) {
        AlgTermVar(__,__): Pair(t, env);
        AlgTermFunc(name, args, __): {
            p = fold(args, Pair([], env), \acc, arg -> {
                p = doMakeAllBoundVarsDifferent(arg, acc.second);
                Pair(
                    concat(acc.first, [p.first]), 
                    p.second
                );
            });
            new_args = p.first;
            new_env = p.second;
            if (isQuantifierOper(name)) {
                var = getTermQuantVar(t);
                new_var = var + "_fresh_" + i2s(new_env.counter);
                new_env_1 = AllBoundVarsDifferentEnv(
                    new_env.counter + 1,
                    setTree(new_env.renaming, var, new_var)
                );
                Pair(applyRenaming2term(t, new_env_1.renaming), new_env_1);
            } else {
                Pair(
                    AlgTermFunc(t with args = new_args), 
                    new_env
                );
            }
        }
    }
}

renameQuantifierVar(quant : string, v : string) -> string {
    i = strIndexOf(quant, " ");
    substring(quant, 0, i) + " " + v;
}

applyRenaming2term(t : AlgTerm, renaming : Tree<string, string>) -> AlgTerm {
    switch (t) {
        AlgTermVar(v,__): 
            AlgTermVar(t with name = lookupTreeDef(renaming, v, v));
        AlgTermFunc(name, args, __): {
            renamed_args = map(args, \a -> applyRenaming2term(a, renaming));
            if (isQuantifierOper(name)) {
                v = getTermQuantVar(t);
                switch (lookupTree(renaming, v)) {
                    Some(w): {
                        AlgTermFunc(t with 
                            name = renameQuantifierVar(name, w),
                            args = renamed_args
                        );
                    }
                    None(): AlgTermFunc(t with args = renamed_args);
                }
            } else {
                AlgTermFunc(t with args = renamed_args);
            }
        }
    }
}


PulledQuantifier(
    name : string,
    var : AlgTermVar,
    restriction : AlgTerm
);

pullQuantifiersOutside(t : AlgTerm) -> AlgTerm {
   pulled = doPullQuantifiersOutside(t, []);
   fold(pulled.second, pulled.first, \acc, quant -> 
        AlgTermFunc(quant.name, [quant.var, quant.restriction, acc], boolType)
   );
}

doPullQuantifiersOutside(t : AlgTerm, quants : [PulledQuantifier]) -> Pair<AlgTerm, [PulledQuantifier]> {
    switch (t) {
        AlgTermVar(v,__): Pair(t, quants);
        AlgTermFunc(name, args, __): {
            pulled_args = fold(args, Pair([], quants), \acc, arg -> {
                p = doPullQuantifiersOutside(arg, acc.second);
                Pair(
                    concat(acc.first, [p.first]),
                    concat(acc.second, p.second),
                );
            });
            if (isQuantifierOper(name)) {
                Pair(
                    pulled_args.first[2],
                    concat(
                        pulled_args.second, 
                        [PulledQuantifier(
                            name, 
                            cast(args[0] : AlgTerm -> AlgTermVar), 
                            args[1]
                        )]
                    )
                )
            } else {
                Pair(
                    AlgTermFunc(t with args = pulled_args.first),
                    pulled_args.second
                );
            }
        }
    }
}
