import net/url_parameter;
import fs/filesystem;
import parser/parse;
import typecheck;
import module;
import algebra;

main() -> void {
    println("Semantic programming framework\n");
	conf = makeConf();
	//println("Conf:\n" + strIndent(conf2s(conf)));
	if (conf.file == "") {
		println("No input file.");
	} else if (!fileExists(conf.file)) {
        println("File: " + conf.file  + " doesn't exist");
    } else {
        ext = getFileExt(conf.file);
        if (ext != ".sem") {
            println("Extension: " + ext  + " mismatches the expected .sem");
        } else {
            src = getFileContent(conf.file);
            name = changeFileExt(conf.file, "");
            module = typecheckModule(parseModule(src, name), fullAlgebra);

			// initial dummy eval func
            eval = ref \term -> undefEval;

            algebra = EvalAlgebra("module " + name + " algebra", 
                fold(module.defs, fullAlgebra.opers, \acc, def -> 
                    concat(acc, [makeDefOper(def, eval)])
                ),
                fullAlgebra.consts
            );

			if (lookupTreeDef(conf.opts, "show-algebra", "") == "1") {
				println(evalAlgebra2s(algebra));
			} else if (lookupTreeDef(conf.opts, "show-module", "") == "1") {
				show = algebraShow(algebra);
            	println("Module " + name + ":\n" + module2s(module, show, conf) + "\n\n");
			} else {
				eval := algebraEval(algebra);
            	^eval(AlgTermFunc("main", [], voidType)).eval(conf.opts, conf);
            	{}
			}
        }
    }
    quit(0);
}
