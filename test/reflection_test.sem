
def inc (x : int) : int {
    (x + 1)
}

def fn (x : int) : int {
    (x + (x + (x - 1)))
}


def egypt(n : int) : bool {
	E(x : int, [1 ... n], 
	E(y : int, [1 ... n],
	E(z : int, [1 ... n]
		(((x * x) + (y * y)) = (z * z))
	)))
}

def find_egypt_up_to(N : int) : string {
	let result : maybe(tuple(int, int, int, int)) = findmap([1 ... N], 
		lambda(n : int, 
			maybeMap(
				find_egypt(n),
				lambda(triple : tuple(int, int, int),
					makeTuple(n, first(triple), second(triple), third(triple))
				)
			)
		)
	);
	eitherMap(result,
		lambda(quad : tuple(int, int, int, int),
			(
				"egypt triange is found for min boundary: " + 
				i2s(first(quad)) + ", triangle: x=" + i2s(second(quad)) + " y=" + i2s(third(quad)) + " z=" + i2s(fourth(quad))
			)
		),
		("no egypt triangles are found up to " + i2s(N))
	)
}

def find_egypt(n : int) : maybe(tuple(int, int, int)) {
	findmap([1 ... n], 
		lambda(x : int,
			maybeMap(
				findmap([1 ... n],
					lambda(y : int,
						maybeMap(
							findmap([1 ... n],
								lambda(z : int,
									if (
										(((x * x) + (y * y)) = (z * z)),
										some(makeTuple(z)),
										none()
									)
								)
							),
							lambda(single : tuple(int),
								makeTuple(y, first(single))
							)
						)
					)
				),
				lambda(pair : tuple(int, int),
					makeTuple(x, first(pair), second(pair))
				)
			)
		)
	)
}

def retVarsTupleType (vars : [tuple(string, type)]) : type {
	let tup_type : type = makeTypeFunc("tuple", 
		map(vars, 
			lambda(v : tuple(string, type),
				makeTypeFunc("tuple", 
					arr[makeTypeFunc("string", arr[]), second(v)]
				)
			)
		)
	);
	let ret_type : type = makeTypeFunc("maybe", arr[tup_type]);
	ret_type
}


def wrapExists (t : term, vars : [tuple(string, type)]) : term {
	if (
		("bool" = typeName(termType(t))),
		let args : [term] = termArgs(t);
		if (
			A(arg : term, args, (typeName(termType(arg)) = "bool")),
			/*if(
				("E" = termName(t)),
				(
					makeTermFunc("findmap", arr[
						get(termArgs(t), 1),

					])
				),
				makeTermFunc(
					termName(t), 
					map(args, lambda(x : term, wrapExists(x))), 
					termType(t)
				)
			),*/
			t,
			let str_type : type = makeTypeFunc("string", arr[]); 
			makeTermFunc("if",
				arr[t, 
					makeTermFunc("some", 
						arr[
							makeTermFunc(
								"makeTuple",
								map(vars, 
									lambda(v : tuple(string, type),
										makeTermFunc(
											"makeTuple", 
											arr[
												makeTermFunc(first(v), arr[], str_type),
												makeVarUse(first(v)),
											]
										)
									)
								)
							)
						]
					),
					makeTermFunc("none", arr[])
				]
			)
		),
		t,
	)
}


def transf (t : term) : term {
	if (
		(termName(t) = "+"),
		makeTermFunc(
			"*", 
			map(termArgs(t), lambda(x : term, transf(x))), 
			termType(t)
		),
		t,
	)
}


def test_wrap() : string {
	let x : int = 1;
	let y : int = 2;
	let z : int = 3;
	let int_type : type = makeTypeFunc("int", arr[]);
	term2s(
		wrapExists(
			quote(
				((x + (y * z)) = 5)
			),
			arr[
				makeTuple("x", int_type),
				makeTuple("y", int_type),
				makeTuple("z", int_type)
			]
		)
	)
}


def tic_tac_toe_win_strategy(n : int, m : int, k : int) : bool {
	let a_steps : [tuple(int, int)] = arr[];
	let b_steps : [tuple(int, int)] = arr[];
	tic_tac_toe_win_strategy(n, m, k, a_steps, b_steps, 0)
}

def tic_tac_toe_win_strategy(
	n : int, 
	m : int, 
	k : int, 
	a_steps : [tuple(int, int)],
	b_steps : [tuple(int, int)],
	step : int
) : bool {
	if(
		(check_is_winning(n, m, k, a_steps) /\ !(check_is_winning(n, m, k, b_steps))),
		true,
		if(
			check_is_winning(n, m, k, b_steps),
			false,
			if (
				(step = k),
				false,
				E(ax : int, [0 ... (n - 1)],
					E(ay : int, [0 ... (m - 1)],
						let a : tuple(int, int) = makeTuple(ax, ay);
						(
							!(contains(a_steps, a)) /\
							let a1_steps : [tuple(int, int)] = add(a, a_steps);
							if(
								check_is_winning(n, m, k, a1_steps),
								true,
								A(bx : int, [0 ... (n - 1)],
									A(by : int, [0 ... (m - 1)],
										let b : tuple(int, int) = makeTuple(bx, by);
										(
											!(contains(b_steps, b)) ->
											let b1_steps : [tuple(int, int)] = add(b, b_steps);
											tic_tac_toe_win_strategy(n, m, k, a1_steps, b_steps, (step + 1))
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
}

def check_is_winning_fn(
	n : int, 
	m : int, 
	k : int, 
	steps : [tuple(int, int)], 
	fn : (int, int, int) -> tuple(int, int)
) : bool {
	E(i : int, [0 ... (n - 1)],
		E(j : int, [0 ... (m - 1)],
			A(s : int, [0 ... (k - 1)],
				contains(steps, fn(i, j, s))
			)
		)
	)
}

def check_is_winning(
	n : int, 
	m : int, 
	k : int, 
	steps : [tuple(int, int)]
) : bool {
	(
		check_is_winning_fn(n, m, k, steps,
			lambda(i : int, j : int, s : int,
				makeTuple(i, (j + s))
			)
		) \/
		check_is_winning_fn(n, m, k, steps,
			lambda(i : int, j : int, s : int,
				makeTuple((i + s), j)
			)
		) \/
		check_is_winning_fn(n, m, k, steps,
			lambda(i : int, j : int, s : int,
				makeTuple((i + s), (j + s))
			)
		)
	)
}

def main() : void {
    println(
		("inc: " + term2s(src("inc"))),
		//("inc: " + a2s(eval(src("inc")))),
		("inc(1): " + 
			i2s(let x : int = 2;
				eval(src("inc"))
			)
		),
		("eval(quote((x + 1)))(2): " + 
			i2s(let x : int = 2;
				eval(quote((x + 1)))
			)
		),
		("inc(1): " + 
			i2s(
				call(
					lambda(x : int,
						eval(src("inc"))
					),
					3
				)
			)
		),

		("transf: " + term2s(
			transf(src("inc"))
		)),

		("fn(5): " + i2s(fn(5))),
		("transf(\"fn\"):\n" + 
			"\t" + term2s(src("fn")) + "\n" +
			"\t" + term2s(transf(src("fn"))) + "\n"
		),
		("transf(fn)(5): " + 
			i2s(
				call(
					lambda(x : int,
						eval(transf(src("fn")))
					),
					5
				)
			)
		),

		find_egypt_up_to(4),
		find_egypt_up_to(7),

		("retVarsTupleType: \n" +
			type2s(
				retVarsTupleType(arr[
					makeTuple("x", 
						makeTypeFunc("tp", arr[makeTypeVar("T"), makeTypeFunc("tpf", arr[])])
					),
					makeTuple("y", 
						makeTypeFunc("string", arr[])
					),
					makeTuple("z", 
						makeTypeFunc("ar", arr[makeTypeFunc("int", arr[])])
					)
				])
			)
		)

		// def wrapExists (t : term, vars : [tuple(string, type)]) : term 

		("wrapExists: \n" + test_wrap())
		/*	let x : int = 1;
			let y : int = 2;
			let z : int = 3;
			let int_type : type = makeTypeFunc("int", arr[]);
			term2s(
				wrapExists(
					quote(
						((x + (y * z)) = 5)
					),
					arr[
						makeTuple("x", int_type),
						makeTuple("y", int_type),
						makeTuple("z", int_type)
					]
				)
			)
		)*/
		("tic-tac 1x1x1: \n\t" + 
			a2s(tic_tac_toe_win_strategy(1, 1, 1))
		),
		("tic-tac 2x2x2: \n\t" + 
			a2s(tic_tac_toe_win_strategy(2, 2, 2))
		),
		("tic-tac 3x3x3: \n\t" + 
			a2s(tic_tac_toe_win_strategy(3, 3, 3))
		),
		("tic-tac 4x4x3: \n\t" + 
			a2s(tic_tac_toe_win_strategy(4, 4, 3))
		)
    )
}

