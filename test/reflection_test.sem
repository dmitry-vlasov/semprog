
def inc (x : int) : int {
    (x + 1)
}

def fn (x : int) : int {
    (x + (x + (x - 1)))
}


def egypt(n : int) : bool {
	E(x : int, [1 ... n], 
	E(y : int, [1 ... n],
	E(z : int, [1 ... n]
		let s : bool = (((x * x) + (y * y)) = (z * z));
		s
	)))
}


def transf (t : term) : term {
	if (
		("+" = termName(t)),
		makeTermFunc(
			"*", 
			map(termArgs(t), lambda(x : term, transf(x))), 
			termType(t)
		),
		t,
	)
}

def main() : void {
    println(
		("inc: " + term2s(src("inc"))),
		//("inc: " + a2s(evalTerm(src("inc")))),
		("inc(1): " + 
			i2s(let x : int = 2;
				evalTerm(src("inc"))
			)
		),
		("inc(1): " + 
			i2s(
				call(
					lambda(x : int,
						evalTerm(src("inc"))
					),
					3
				)
			)
		),

		("transf: " + term2s(
			transf(src("inc"))
		)),

		("fn(5): " + i2s(fn(5))),
		("transf(\"fn\"):\n" + 
			"\t" + term2s(src("fn")) + "\n" +
			"\t" + term2s(transf(src("fn"))) + "\n"
		),
		("transf(fn)(5): " + 
			i2s(
				call(
					lambda(x : int,
						evalTerm(transf(src("fn")))
					),
					5
				)
			)
		),
    )
}

