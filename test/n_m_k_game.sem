

def n_m_k__win_strategy(n : int, m : int, k : int) : bool {
	let a_steps : [tuple(int, int)] = arr[];
	let b_steps : [tuple(int, int)] = arr[];
	n_m_k__win_strategy(n, m, k, a_steps, b_steps, 0)
}

def n_m_k__win_strategy(
	n : int, 
	m : int, 
	k : int, 
	a_steps : [tuple(int, int)],
	b_steps : [tuple(int, int)],
	step : int
) : bool {
	if(
		(check_is_winning(n, m, k, a_steps) /\ !(check_is_winning(n, m, k, b_steps))),
		true,
		if(
			check_is_winning(n, m, k, b_steps),
			false,
			if (
				(step = k),
				false,
				E(ax : int, [0 ... (n - 1)],
					E(ay : int, [0 ... (m - 1)],
						let a : tuple(int, int) = makeTuple(ax, ay);
						(
							!(contains(a_steps, a)) /\
							let a1_steps : [tuple(int, int)] = add(a, a_steps);
							if(
								check_is_winning(n, m, k, a1_steps),
								true,
								A(bx : int, [0 ... (n - 1)],
									A(by : int, [0 ... (m - 1)],
										let b : tuple(int, int) = makeTuple(bx, by);
										(
											!(contains(b_steps, b)) ->
											let b1_steps : [tuple(int, int)] = add(b, b_steps);
											n_m_k__win_strategy(n, m, k, a1_steps, b_steps, (step + 1))
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
}

def check_is_winning_fn(
	n : int, 
	m : int, 
	k : int, 
	steps : [tuple(int, int)], 
	fn : (int, int, int) -> tuple(int, int)
) : bool {
	E(i : int, [0 ... (n - 1)],
		E(j : int, [0 ... (m - 1)],
			A(s : int, [0 ... (k - 1)],
				contains(steps, fn(i, j, s))
			)
		)
	)
}

def check_is_winning(
	n : int, 
	m : int, 
	k : int, 
	steps : [tuple(int, int)]
) : bool {
	(
		check_is_winning_fn(n, m, k, steps,
			lambda(i : int, j : int, s : int,
				makeTuple(i, (j + s))
			)
		) \/
		check_is_winning_fn(n, m, k, steps,
			lambda(i : int, j : int, s : int,
				makeTuple((i + s), j)
			)
		) \/
		check_is_winning_fn(n, m, k, steps,
			lambda(i : int, j : int, s : int,
				makeTuple((i + s), (j + s))
			)
		)
	)
}

def main() : void {
    println(
		("n_m_k: 1x1x1: \n\t" + 
			a2s(n_m_k__win_strategy(1, 1, 1))
		),
		("n_m_k: 2x2x2: \n\t" + 
			a2s(n_m_k__win_strategy(2, 2, 2))
		),
		("n_m_k: 3x3x3: \n\t" + 
			a2s(n_m_k__win_strategy(3, 3, 3))
		),
		("n_m_k: 4x4x3: \n\t" + 
			a2s(n_m_k__win_strategy(4, 4, 3))
		),
		("n_m_k: 5x5x3: \n\t" + 
			a2s(n_m_k__win_strategy(5, 5, 3))
		)
    )
}

