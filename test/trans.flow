import trans/atom;
import trans/trans;
import prop/prop;
import arithm/arithm;

export {
    testTrans() -> void;
}

testTrans() {
    print_bool_val = \val -> if (isSameStructType(val, undefVal)) "<UNDEF>" else b2s(val);
    iter(trans_tests, \p -> {
        //println("Testing: " + p.first);
        term = parseArithm(p.first);
        algebra = arithmeticsAlgebra(term);
        println(p.first + " \n " + algebraShow(algebra).show(term));
        println("");
        atomizedTerm = atomize(term);

        algebraAtom = arithmeticsAlgebra(atomizedTerm);
        
        //println(evalAlgebra2s(algebra));
        //println(p.first + " 2= " + algebraShow(algebra).show(term));
        println(p.first + " \n "+ algebraShow(algebraAtom).show(atomizedTerm));
        qbfTerm = delta2qbf(cast(atomizedTerm : AlgTerm -> AlgTermFunc), TransParams(enumFromTo(0, 2), enumFromTo(0, 2)));

        algebraQBF = makeQBFLongAlgebra(getBoolQuantifiers(qbfTerm), getLongLogOpers(qbfTerm));
        println(p.first + " \n " + algebraShow(algebraQBF).show(qbfTerm));
        //println(p.first + " \n "+ algTerm2s(atomizedTerm));
        //println("");
        //println(p.first + " = " + prop_show(term));
        //println("eval(" + p.first + ")[" + showValuation(p.second) + "] = " );
        //println(algebraEval(algebra).eval(term, p.second));
    });
}

trans_tests = [
    Pair("(x = y)", makeTree()),
    Pair("(x = tail(y))", makeTree()),
    /*Pair("(x < (1 + 1))", makeTree()),
    Pair("(x < (y + 1))", makeTree()),
    Pair("E x : [1, 2] (x = x)", makeTree()),
    Pair("E x : [2, 3] E y : [(x + 1), (x * 2)] (((x * 2) + 1) = y)", makeTree()),
    Pair("E x : [2, 3] A y : [(x + 1), (x * 2)] (((x * 2) + 1) != y)", makeTree()),
    Pair("E x : [2, 3] A y : [(x + 1) ... (x * 2)] (((x * 2) + 1) != y)", makeTree()),
    Pair("A x : [2, 3] E y : [(x + 1) ... (x * 2)] (((x * 2) + 1) != y)", makeTree()), 
    Pair("A x : [0 ... 9] E y : [x ... (x * x)] (((x * 2) + 1) != y)", makeTree()),
    Pair("E x : [a ... b] A y : [2 ... x] ( (x = ((x / y) * y)) -> (y = x))", pairs2tree([Pair("a", 1),   Pair("b", 6)  ])),
    Pair("E x : [a ... b] A y : [2 ... x] ( (x = ((x / y) * y)) -> (y = x))", pairs2tree([Pair("a", 346), Pair("b", 348)])),
    Pair("E x : [a ... b] A y : [2 ... x] ( (x = ((x / y) * y)) -> (y = x))", pairs2tree([Pair("a", 632), Pair("b", 640)])),
    Pair("S x : [1 ... 3] ((x / 2) = 1)", makeTree()), */
]

