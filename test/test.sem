

def one_less_two () : bool {
    (1 < 2) 
}

def two_less_one () : bool {
    (2 < 1) 
}

//def one_in_emptyset () : bool  {
//    (1 in [])
//}

//def x_in_emptyset (x : int) : bool {
//    (x in [])
//}

def mult (x : int, y : int) : int {
    (x * y)
}

def minus (x : int, y : int) : int {
    (x - y)
}

def min (x : int) : bool {
    ((x = 0) ? 75 : (x - 1 ) )
}

def x_in_set_one_two (x : int) : bool {
    (x in [1, 2])
}


def fact (x : int) : int {
    ((x = 0) ? 1 : (1 * x * 1 * fact((x - 1))))
}

def fact_five() : int {
    fact(5)
}

/*
println(
		(\rec ->
			\n ->
				rec(n, 1, rec)
		)
		(\i, p, fn : flow ->
			if (i > 1) {
				fn(i - 1, p * i, fn);
			} else {
				p;
			}
		)
		(6)
	);
*/

def main() : void {
    println(
        ("5! = " + i2s(fact_five())),
        ("7! = " + i2s(fact(7))),
        ("lambda1 x : int (x = 2)(2): " + b2s(
            call1(lambda1 x : int (x = 2), 2)
        )),
        ("lambda1 x : int (x = 2)(3): " + b2s(
            call1(lambda1 x : int (x = 2), 3)
        )),
		("5!(rec1): " + i2s(
			let x : int = 5;
            call1(
				rec1(lambda3 i : int, acc : int, fn : (int, int, any) -> int
					((i = 1) ? acc : call3(fn, (i - 1), (acc * i), fn))
				), 
				x
			)
        )),
        ("E x : int in [2, 3] (x = 2): " + b2s(E x : int in [2, 3] (x = 2))),
        ("E x : int in [2, 3] E y : int in [(x + 1), (x * 2)] (((x * 2) + 1) = y): " + 
            b2s(
                E x : int in [2, 3] E y : int in [(x + 1), (x * 2)] (((x * 2) + 1) = y)
            )
        )
    )
}

