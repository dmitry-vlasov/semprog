
def tree_ () : int {
    (1 + 2)
}


def one_less_two () : bool {
    (1 < 2) 
}

def two_less_one () : bool {
    (2 < 1) 
}

/*
def one_in_emptyset () : bool  {
    (1 in arr[])
}

def x_in_emptyset (x : int) : bool {
    (x in arr[])
}
*/
def mult (x : int, y : int) : int {
    (x * y)
}

def minus (x : int, y : int) : int {
    (x - y)
}

def min (x : int) : bool {
    ((x = 0) ? 75 : (x - 1 ) )
}

def x_in_set_one_two (x : int) : bool {
    (x in arr[1, 2])
}


def fact (x : int) : int {
	((x = 0) ? 1 : (x * fact((x - 1))))
}

def fact_five() : int {
    fact(5)
}

def fact_11() : string {
	i2s(
		call1(
			rec1(
				lambda3(i : int, acc : int, fn : (int, int, any) -> int,
					if(
						(i = 1), 
						acc, 
						call3(fn, (i - 1), (acc * i), fn)
					)
				)
			), 
			5
		)
	)
}

def egypt(n : int) : bool {
	E(x : int, [1 ... n], 
	E(y : int, [1 ... n],
	E(z : int, [1 ... n]
		let s : bool = (((x * x) + (y * y)) = (z * z));
		s
	)))
}

def show_egypt(n : int) : string {
	("egypt(" + i2s(n) + "): " + b2s(egypt(n)))
}

def main() : void {
    println(
        ("5! = " + i2s(fact_five())),
        ("7! = " + i2s(fact(7))),
        ("lambda1 x : int . (x = 2)(2): " + b2s(
            call1(lambda1(x : int, (x = 2)), 2)
        )),


        ("lambda1 x : int . (x = 2)(3): " + b2s(
            call1(lambda1(x : int, (x = 2)), 3)
        )),

		("lambda2 x : int, y : int . (x = 2)(3): " + i2s(
            call2(lambda2(x : int, y : int, (x + y)), 3, 4)
        )),
	
		("lambda2 x : int, y : int . (x = 2)(3): " + i2s(
            call2(
				lambda2(x : int, y : (int) -> int, y(x)), 
				3, 
				lambda1(x : int, (x + 1))
			)
        )),

		("fact_11: " + fact_11()),

		("5!(rec1): " + i2s(
			call1(
				rec1(
					lambda3(i : int, acc : int, fn : (int, int, any) -> int,
						if(
							(i = 1), 
							acc, 
							call3(fn, (i - 1), (acc * i), fn)
						)
					)
				), 
				5
			)
        )),

		("5!(rec1): " + i2s(
			let	x : int = 5;
			call1(
				rec1(lambda3(i : int, acc : int, fn : (int, int, any) -> int,
					if(
						(i = 1), 
						acc, 
						call3(fn, (i - 1), (acc * i), fn)
					)
				)), 
				x
			)
        )),

		("a2s(evals('56')): " + a2s(evals("56"))),


        ("E(x : int, arr[2, 3], (x = 2)): " + 
			b2s(E(x : int, arr[2, 3], (x = 2)))
		),
        ("E(x : int, arr[2, 3], E(y : int, arr[(x + 1), (x * 2)] (((x * 2) + 1) = y))): " + 
            b2s(
                E(x : int, arr[2, 3], E(y : int, arr[(x + 1), (x * 2)] (((x * 2) + 1) = y)))
            )
        ),

		(" !! " + 
            b2s(
                E(x : int, [1 ... 5],
				E(y : int, [1 ... 5],
				E(z : int, [1 ... 5],
					//(((x * x) + (y * y)) = (z * z))
					let s : bool = (((x * x) + (y * y)) = (z * z));
					s
				)))
            )
        ),

		("egypt(2): " + 
            b2s(egypt(2))
        ),
		show_egypt(2),
		show_egypt(3),
		show_egypt(4),
		show_egypt(5),
    )
}

