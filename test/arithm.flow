import prop/prop;
import arithm/arithm;
import trans/pnf;

export {
    testArithm() -> void;
}

testArithm() {
    print_bool_val = \val -> if (isSameStructType(val, undefVal)) "<UNDEF>" else b2s(val);
    iter(arithm_tests, \p -> {
        //println("Testing: " + p.first);
        term = parseArithm(p.first);
        //println(p.first + " 1= " + algTypedTerm2s(term));
        algebra = arithmeticsAlgebra(term);
        println(evalAlgebra2s(algebra));
        //println(p.first + " 2= " + algebraShow(algebra).show(term));
        //println(p.first + " 3= " + algTypedTerm2s(term));
        //println("");
        //println(p.first + " = " + prop_show(term));
        eval = algebraEval(algebra).eval;
        show = algebraShow(algebra).show;
        println("eval(" + p.first + ")[" + showValuation(p.second) + "] = " );
        println(eval(term, p.second));

        pnf = formula2pnf(term);
        pnf_algebra = arithmeticsAlgebra(pnf);
        show_pnf = algebraShow(pnf_algebra).show;
        println("PNF:\n" + show_pnf(pnf) + "\n\n");
    });
}

arithm_tests = [
    Pair("T", makeTree()),
    Pair("F", makeTree()),
    Pair("(1 < 2)", makeTree()),
    Pair("(2 < 1)", makeTree()),
    Pair("(1 in [])", makeTree()),
    Pair("(1 in [1])", makeTree()),
    Pair("(1 in [1, 2])", makeTree()),
    Pair("(1 in [2, 3])", makeTree()),
    Pair("(x in [2, 3])", makeTree1("x", 2)),
    Pair("(x = 2)", makeTree1("x", 2)),
    Pair("(x = 3)", makeTree1("x", 2)),
    Pair("E x : [2, 3] (x = 2)", makeTree()),
    Pair("E x : [2, 3] (x = 1)", makeTree()),
    Pair("E x : [2, 3] E y : [(x + 1), (x * 2)] (((x * 2) + 1) = y)", makeTree()),
    Pair("E x : [2, 3] A y : [(x + 1), (x * 2)] (((x * 2) + 1) != y)", makeTree()),
    Pair("E x : [2, 3] A y : [(x + 1) ... (x * 2)] (((x * 2) + 1) != y)", makeTree()),
    Pair("A x : [2, 3] E y : [(x + 1) ... (x * 2)] (((x * 2) + 1) != y)", makeTree()),
    Pair("A x : [0 ... 9] E y : [x ... (x * x)] (((x * 2) + 1) != y)", makeTree()),
    Pair("E x : [a ... b] A y : [2 ... x] ( (x = ((x / y) * y)) -> (y = x))", pairs2tree([Pair("a", 1),   Pair("b", 6)  ])),
    Pair("E x : [a ... b] A y : [2 ... x] ( (x = ((x / y) * y)) -> (y = x))", pairs2tree([Pair("a", 346), Pair("b", 348)])),
    Pair("E x : [a ... b] A y : [2 ... x] ( (x = ((x / y) * y)) -> (y = x))", pairs2tree([Pair("a", 632), Pair("b", 640)])),
    Pair("S x : [1 ... 3] ((x / 2) = 1)", makeTree()),

    Pair("E x : sublists([1 ... 3]) (x = [1, 2])", makeTree()),
    Pair("E x : sublists([1 ... 3]) (x = [2, 3])", makeTree()),


    Pair("E x : sublists([1 ... 3]) E y : sublists([3 ... 4]) (concat(x, y) = [1, 3])", makeTree()),
    Pair("E x : sublists([1 ... 3]) E y : sublists([3 ... 4]) (concat(x, y) = [1, 3, 4])", makeTree()),
    Pair("E x : sublists([1 ... 3]) E y : sublists([3 ... 4]) (concat(x, y) = [3, 4, 1])", makeTree()),

    Pair("E x : sublists([1 ... 3]) E y : sublists([3 ... 4]) ([x, y] = [[1, 2], [3, 4]])", makeTree()),
    Pair("E x : sublists([1 ... 3]) E y : sublists([3 ... 4]) ([x, y] = [[3, 4], [1, 2]])", makeTree()),

    Pair("E x : sublists([1 ... 3]) E y : sublists([3 ... 4]) ([x, y] = add([1, 2], [[3, 4]]))", makeTree()),
]