import ds/tree;
import ds/set;
import string;

import type;
import term;

export {
    // General semantics: eval function.
    Eval(
        eval : (term : AlgTerm, vals : Tree<string, flow>) -> flow
    );
    Show(
        show : (term : AlgTerm) -> string
    );

    // The structure, which defines a sementics for an operation.
    // Operation may be polymorphic, i.e. may deal on different types of arguments.
    EvalOper(
        name : string, 
        sign : AlgTypeFunc, 
        eval : (Eval, args : [AlgTerm], vals : Tree<string, flow>) -> flow,
        show : (Show, args : [AlgTerm]) -> string
    );

    // A constant provider. When a constant of a certain type is met,
    // this structure provides its value from a string representation.
    EvalConst(
        type : AlgTypeFunc,
        eval : (string) -> flow
     );

    //makeSem(sem  : (Eval, args : [AlgTerm], vals : Tree<string, flow>) -> flow) -> (Eval) -> Eval;
    //makeShow(show  : (Show, args : [AlgTerm]) -> string) -> (Show) -> Show;

    // Algebra: consists of a set of operations with their sementics.
    EvalAlgebra(name : string, opers : [EvalOper], consts : [EvalConst]);

    algebraEval(alg : EvalAlgebra) -> Eval;
    algebraShow(alg : EvalAlgebra) -> Show;

    // Show info about algebra, mainly its signature
    evalAlgebra2s(alg : EvalAlgebra) -> string;

    showDfEvalOper(name) -> (Show, args : [AlgTerm]) -> string;
    showConstEvalOper(name) -> (Show, args : [AlgTerm]) -> string;
    showUnaryEvalOper(name) -> (Show, args : [AlgTerm]) -> string;
    showBinaryEvalOper(name) -> (Show, args : [AlgTerm]) -> string;
    showBracketEvalOper(open : string, close : string, infix : string) -> (Show, args : [AlgTerm]) -> string;
    showNaryEvalOper(name : string, arity : int) -> (Show, args : [AlgTerm]) -> string;
    showVariadicEvalOper(name : string) -> (Show, args : [AlgTerm]) -> string;

    // Special constant: undefined value.
    UndefVal();
    undefVal = UndefVal();
    showValuation(v : Tree<string, flow>) -> string;
}

algebraEval(alg : EvalAlgebra) -> Eval {
    opers = fold(alg.opers, makeTree(), \acc, op -> 
        setTree(acc, op.name, concat(lookupTreeDef(acc, op.name, []), [op]))
    );
    consts = fold(alg.consts, makeTree(), \acc, const -> {
        if (containsKeyTree(acc, const.type)) {
            println("constant provider for type " + algType2s(const.type) + " is already provided");
        }
        setTree(acc, const.type, const);
    });
    Eval(\term, vals -> evalAlgTerm(term, vals, opers, consts));
}

evalAlgTerm(
    term : AlgTerm, 
    vals : Tree<string, flow>, 
    opers : Tree<string, [EvalOper]>,
    consts : Tree<AlgTypeFunc, EvalConst>
) -> flow {
    eval = Eval(\t, vs -> evalAlgTerm(t, vs, opers, consts));
    switch (term) {
        AlgTermVar(name, type): {
            lookupTreeDef(vals, name, flow(undefVal));
        }
        AlgTermFunc(name, args, type): {
            arg_types = map(args, \arg -> arg.type);
            eitherMap(
                lookupTree(opers, name), \ops -> {
                    fits = filter(ops, \op -> 
                        isSome(matchTypes(funcArgTypes(op.sign), arg_types, makeTree()))
                    );
                    if (length(fits) == 0) {
                        println("(C) no operator " + name + " matches argument types: " + strGlue(map(arg_types, \t -> algType2s(t)), ", "));
                        flow(undefVal);
                    } else if (length(fits) > 1) {
                        println("ambigous operator " + name + " matching with argument types: " + strGlue(map(arg_types, \t -> algType2s(t)), ", "));
                        flow(undefVal);
                    } else {
                        flow(fits[0].eval(eval, args, vals));
                    }
                }, 
                if (length(args) != 0) {
                    if (!containsKeyTree(opers, name)) {
                       println("unknown operator: " + name);
                    }
                    flow(undefVal)
                } else {
                    switch (lookupTree(consts, type)) {
                        Some(const): flow(const.eval(name));
                        None(): {
                            println("constant: " + name + " of type " + toString(type) +  " is uniterpreted");
                            flow(undefVal)
                        }
                    }
                }
            );
        }
    }
}

algebraShow(alg : EvalAlgebra) -> Show {
    opers = fold(alg.opers, makeTree(), \acc, op -> 
        setTree(acc, op.name, concat(lookupTreeDef(acc, op.name, []), [op]))
    );
    consts = fold(alg.consts, makeTree(), \acc, const -> {
        if (containsKeyTree(acc, const.type)) {
            println("constant provider for type " + algType2s(const.type) + " is already provided");
        }
        setTree(acc, const.type, const);
    });
    Show(\term -> showAlgTerm(term, opers, consts));
}

showAlgTerm(
    term : AlgTerm, 
    opers : Tree<string, [EvalOper]>,
    consts : Tree<AlgTypeFunc, EvalConst>
) -> string {
    show = Show(\t, -> showAlgTerm(t, opers, consts));
    switch (term) {
        AlgTermVar(name, type): name;
        AlgTermFunc(name, args, type): {
            arg_types = map(args, \arg -> arg.type);
            eitherMap(
                lookupTree(opers, name), 
                \ops -> {
                    fits = filter(ops, \op -> 
                        isSome(matchTypes(funcArgTypes(op.sign), arg_types, makeTree()))
                    );
                    if (length(fits) == 0) {
                        println("(A) no operator " + name + " matches argument types: " + strGlue(map(arg_types, \t -> algType2s(t)), ", "));
                        println("ops: " + strGlue(map(ops, \op -> algType2s(op.sign)), ", "));
                        "undefVal";
                    } else if (length(fits) > 1) {
                        println("ambigous operator " + name + " matching with argument types: " + strGlue(map(arg_types, \t -> algType2s(t)), ", "));
                        "undefVal";
                    } else {
                        fits[0].show(show, args);
                    }
                },
                if (length(args) != 0) {
                    "undefVal"
                } else {
                    switch (lookupTree(consts, type)) {
                        Some(__): name;
                        None(): {
                            println("constant: " + name + " of type " + toString(type) +  " is uniterpreted");
                            "undefVal"
                        }
                    }
                }
            );
        }
    }
}

evalAlgebra2s(alg : EvalAlgebra) -> string {
    alg.name + ":\n"+ 
    strGlue(map(alg.opers, \op -> "\t" + op.name + " : " + algType2s(op.sign) + "\n"),  "") +
    (if (length(alg.consts) == 0) "" else 
        "\n" + 
        strGlue(map(alg.consts, \const -> "\tconst (string) -> " + algType2s(const.type) + "\n"), "")
    );
}

showDfEvalOper(name : string) -> (Show, args : [AlgTerm]) -> string {
    \s, args -> {
        name + (if (length(args) == 0) "" else  "(" + strGlue(map(args, \a -> s.show(a)), ", ") + ")");
    }
}

showConstEvalOper(name : string) -> (Show, args : [AlgTerm]) -> string {
    \s, args -> if (length(args) != 0) "broken const " + name + ", args: [" + strGlue(map(args, algTerm2s), ", ") + "]" else name;
}

showUnaryEvalOper(name : string) -> (Show, args : [AlgTerm]) -> string {
    \s, args -> {
        if (length(args) != 1) "broken unary " + name + ", args: [" + strGlue(map(args, algTerm2s), ", ") + "]"  else
            name + s.show(args[0]);
    }
}

showBinaryEvalOper(name : string) -> (Show, args : [AlgTerm]) -> string {
    \s, args -> {
        if (length(args) != 2) "broken binary " + name + ", args: [" + strGlue(map(args, algTerm2s), ", ") + "]"  else
        "(" + s.show(args[0]) + " " + name + " " + s.show(args[1]) + ")";
    }
}

showNaryEvalOper(name : string, arity : int) -> (Show, args : [AlgTerm]) -> string {
    \s, args -> {
        if (length(args) != arity) "broken " + i2s(arity) + "-ary " + name + ", args: [" + strGlue(map(args, algTerm2s), ", ") + "]" else
        "(" + strGlue(map(args, \arg -> s.show(arg)), " " + name + " ")  + ")";
    }
}

showVariadicEvalOper(name : string) -> (Show, args : [AlgTerm]) -> string {
    \s, args -> {
        "(" + strGlue(map(args, \arg -> s.show(arg)), " " + name + " ")  + ")";
    }
}

showBracketEvalOper(open : string, close : string, infix : string) -> (Show, args : [AlgTerm]) -> string {
    \s, args -> open + strGlue(map(args, \a -> s.show(a)), infix + " ") + close;
}

showValuation(v : Tree<string, flow>) -> string {
    strGlue(map(tree2pairs(v), \p -> p.first + "=" + toString(p.second)),  ", ");
}

// Experimental

makeSem(sem  : (Eval, args : [AlgTerm], vals : Tree<string, flow>) -> flow) -> (Eval) -> Eval {
    \e -> Eval(\t, vs -> 
        switch (t) {
            AlgTermVar(v, __): lookupTreeDef(vs, v, undefVal);
            AlgTermFunc(__, args, __): sem(e, args, vs);
        }
    );
}
makeShow(show  : (Show, args : [AlgTerm]) -> string) -> (Show) -> Show {
    \s -> Show(\t ->
        switch (t) {
            AlgTermVar(v, __): v;
            AlgTermFunc(__, args, __): show(s, args);
        }
    );
}