import type;

export {
    // General form of an algebraic term: variable or an operation over other terms.
    AlgTerm ::= AlgTermVar, AlgTermVarDecl, AlgTermFunc;
    AlgTermVar(name : string, type : AlgType);
    AlgTermVarDecl(name : string, type : AlgType);
    AlgTermFunc(name : string, args : [AlgTerm], type : AlgType);

    algTerm2s(term : AlgTerm) -> string;
    algTypedTerm2s(term : AlgTerm) -> string;
    algTerm2vars(term : AlgTerm) -> Set<AlgTermVar>;
    undefTermVar = AlgTermVar("UNDEF-VAR", undefAlgType);
    undefTermFunc = AlgTermFunc("UNDEF-FUNC", [], undefAlgType)

    // standard classes of operations

    // /\, \/, !, <->, ->
    isBoolOper(name : string) -> bool;

    // A, E, F, SA, SE, BA, BE
    isQuantifierOper(name : string) -> bool;

     // A, E, F, SA, SE, BA, BE
    isVarBounderOper(name : string) -> bool;
}

algTerm2s(term : AlgTerm) -> string {
    switch (term) {
        AlgTermVar(name, type): name;
        AlgTermVarDecl(name, type): name;
        AlgTermFunc(name, args, type): {
            if (length(args) == 0) name else {
                    name + "(" + strGlue(map(args, algTerm2s), ", ") + ")";
            }
        }
    }
}

algTypedTerm2s(term : AlgTerm) -> string {
    switch (term) {
        AlgTermVar(name, type): name + " : " + algType2s(type);
        AlgTermVarDecl(name, type): name + " : " + algType2s(type);
        AlgTermFunc(name, args, type): {
            if (length(args) == 0) name else {
                    name + " : " + algType2s(type) +  " (" + strGlue(map(args, algTypedTerm2s), ", ") + ")";
            }
        }
    }
}

algTerm2vars(term : AlgTerm) -> Set<AlgTermVar> {
    doAlgTerm2s(makeSet(), term);
}

doAlgTerm2s(acc : Set<AlgTermVar>, term : AlgTerm) -> Set<AlgTermVar> {
    switch (term) {
        AlgTermVar(__, __): insertSet(acc, term);
        AlgTermVarDecl(__, __): acc; //insertSet(acc, term);
        AlgTermFunc(__, args, __): fold(args, acc, doAlgTerm2s);
    }
}

isBoolOper(name : string) -> bool {
    name == "\\/" || name == "/\\" || name == "!" || name == "->" || name == "<->";
}

isQuantifierOper(name : string) -> bool {
    name == "A" || name == "E" || name == "F" || name == "BA" || name == "BE" || name == "SA" || name == "SE" || name == "SF";
}

isVarBounderOper(name : string) -> bool {
    name == "A" || name == "E" || name == "F" || name == "BA" || name == "BE" || name == "SA" || name == "SE" || name == "SF" || name == "\\";
}
