import lingo/pegcode/driver;
import term;

export {
    parseProp(str : string) -> AlgTerm;
}

parseProp(str : string) -> AlgTerm {
    e_gr = "#include prop/prop.lingo";
	parsic(compilePegGrammar(e_gr), str, 
        SemanticActions(
            mergeTree(defaultPegActions.t,
            pairs2tree([
                Pair("makeBoolFunc", \s -> AlgTermFunc(flow2s(s[0]), tail(s), boolType)),
                Pair("makeBoolVar",  \s -> AlgTermVar(flow2s(s[0]), boolType)),
                Pair("makeBoolQuantifier", \s -> { 
                    //println(s[1]);
                    var = cast(s[1] : flow -> AlgTermVar);
                    //println("makeQuantifier: " + flow2s(s[0]) + " " + var.name + " = " + toString(s));
                    AlgTermFunc(flow2s(s[0]) + " " + var.name, tail(s), boolType);
                }),
                Pair("makeLongOr", \s -> {
                    as = cast(s[2] : flow -> [flow]);
                    AlgTermFunc("\\/-" + i2s(length(as) + 2), concat([s[0], s[1]], as), boolType);
                }),
                Pair("makeLongAnd", \s -> {
                    as = cast(s[2] : flow -> [flow]);
                    AlgTermFunc("/\\-" + i2s(length(as) + 2), concat([s[0], s[1]], as), boolType);
                }),
            ]))
        )
    );
}