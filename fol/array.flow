import eval;
import dynamic;

export {
    // Array operations
    arrayConcat(type : Type) -> EvalOper ;
    arrayAdd(type : Type) -> EvalOper;
    arrayTail(type : Type) -> EvalOper;
    arrayEmpty(type : Type) -> EvalOper;
    arrayGet(type : Type) -> EvalOper;
    arrayCreate(type : Type, dim : int) -> EvalOper;
    arrayFromTo() -> EvalOper;
}

arrayConcat(type : Type) -> EvalOper {
    EvalOper(
        "concat", fnType([arType(type), arType(type)], arType(type)),
        \e, args, vals -> {
            if (length(args) != 2) flow(undefVal) else {
                concat(
                    cast(e.eval(args[0], vals) : flow -> [flow]), 
                    cast(e.eval(args[1], vals) : flow -> [flow])
                );
            }
        },
        showDfEvalOper("concat")
    );
}

arrayAdd(type : Type) -> EvalOper {
    EvalOper(
        "add", fnType([type, arType(type)], arType(type)),
        \e, args, vals -> {
            if (length(args) != 2) flow(undefVal) else {
                concat(
                    [e.eval(args[0], vals)], 
                    cast(e.eval(args[1], vals) : flow -> [flow])
                );
            }
        },
        showDfEvalOper("add")
    );
}

arrayTail(type : Type) -> EvalOper {
    EvalOper(
        "tail", fnType([arType(type)], arType(type)),
        \e, args, vals -> {
            if (length(args) != 1) flow(undefVal) else {
                tail(cast(e.eval(args[1], vals) : flow -> [flow]));
            }
        },
        showDfEvalOper("tail")
    );
}

arrayEmpty(type : Type) -> EvalOper {
    EvalOper(
        "empty", fnType([], arType(type)),
        \e, args, vals -> {
            if (length(args) != 0) flow(undefVal) else [];
        },
        showDfEvalOper("empty")
    );
}

arrayGet(type : Type) -> EvalOper {
    EvalOper(
        "get", fnType([arType(type), intType], type),
        \e, args, vals -> {
            if (length(args) != 2) flow(undefVal) else {
                a = cast(e.eval(args[1], vals) : flow -> [flow]);
                i = flow2i(e.eval(args[1], vals));
                if (i < length(a)) a[i] else flow(undefVal);
            }
        },
        showDfEvalOper("get")
    );
}

arrayCreate(type : Type, dim : int) -> EvalOper {
    EvalOper(
        "array-" + i2s(dim), 
        fnType(map(enumFromTo(0, dim - 1), \__ -> type), arType(type)),
        \e, args, vals -> {
            if (length(args) != dim) flow(undefVal) else 
            map(args, \arg -> e.eval(arg, vals));
        },
        showBracketEvalOper("[", "]", ",")
    );
}

arrayFromTo() -> EvalOper {
    EvalOper(
        "...", 
        fnType([intType, intType], arType(intType)),
        \e, args, vals -> {
            if (length(args) != 2) flow(undefVal) else {
                low = flow2i(e.eval(args[0], vals));
                hi  = flow2i(e.eval(args[1], vals));
                enumFromTo(low, hi);
            }
        },
        showBracketEvalOper("[", "]", "...")
    );
}